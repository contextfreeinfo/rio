#foreign(header = "<errno.h>")
#foreign(header = "<io.h>")
// TODO: For some reason _finddata_t alone doesn't work. I have to be explicit.
// #foreign(preamble = "typedef struct _finddata_t FindData;")
#foreign(preamble = "typedef struct _finddata64i32_t FindData;")

@foreign
const _A_SUBDIR = 0x10;

@foreign
const ENOENT = 3025;

@foreign
struct FindData {
  attrib: uint;
  size: uint32;
  name: [MAX_PATH]char;
}

@foreign
fn _findclose(handle: intptr) -> int;

@foreign
fn _findfirst(filespec: *const char, fileinfo: &FindData) -> intptr;

@foreign
fn _findnext(handle: intptr, fileinfo: &FindData) -> int;

@foreign
fn _fullpath(absPath: *char, relPath: *const char, maxLength: usize) -> *char;

@foreign("_strdup")
fn strdup(strSource: *const char) -> *char;

fn path_absolute(path: [MAX_PATH]char) {
  let rel_path: [MAX_PATH]char;
  path_copy(rel_path, path);
  _fullpath(path, rel_path, MAX_PATH);
}

fn dir_list_free(iter: &DirListIter) {
  if (iter.valid) {
    _findclose(iter.handle as intptr);
    iter.valid = false;
    iter.error = false;
  }
}

fn dir__update(iter: &DirListIter, done: bool, fileinfo: &FindData) {
  iter.valid = !done;
  iter.error = done && errno != ENOENT;
  if (!done) {
    iter.size = fileinfo.size;
    memcpy(iter.name, fileinfo.name, sizeof(iter.name) - 1);
    iter.name[MAX_PATH - 1] = 0;
    iter.is_dir = fileinfo.attrib & _A_SUBDIR;
  }
}

fn dir_list_next(iter: &DirListIter) {
  if (!iter.valid) {
    return;
  }
  do {
    let fileinfo: FindData;
    let result = _findnext(iter.handle as intptr, &fileinfo);
    dir__update(iter, result != 0, &fileinfo);
    if (result != 0) {
      dir_list_free(iter);
      return;
    }
  } while (dir_excluded(iter));
}

fn dir_list(iter: &DirListIter, path: *const char) {
  memset(iter, 0, sizeof(*iter));
  path_copy(iter.base, path);
  let filespec: [MAX_PATH]char;
  path_copy(filespec, path);
  path_join(filespec, "*");
  let fileinfo: FindData;
  let handle = _findfirst(filespec, &fileinfo);
  iter.handle = handle as &void;
  dir__update(iter, handle == -1, &fileinfo);
  if (dir_excluded(iter)) {
    dir_list_next(iter);
  }
}
