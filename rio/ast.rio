// Types.

struct NoteArg {
  pos: SrcPos;
  name: *const char;
  expr: &Expr;
}

struct Note {
  pos: SrcPos;
  name: *const char;
  args: Slice<NoteArg>;
}

struct StmtList {
  pos: SrcPos;
  stmts: Slice<&Stmt>;
}

struct Typespec {
  pos: SrcPos;
  base: &Typespec;
  // Maybe undeepified here is okay and we can nix other types sometime.
  is_owned: bool;
  union switch {
    // TODO Maybe should undeepify const.
    None, Const, Ptr, Ref => :void;
    Name => struct {
      // TODO Array here isn't okay. Needs to be deep.
      names: Slice<TypespecName>;
      decl: &Decl;
    }
    Func => function: TypespecFunc;
    Array => num_elems: *Expr;
  }
}

struct TypespecName {
  name: *const char;
  type_args: Slice<TypeArg>;
}

struct TypespecFunc {
  args: Slice<&Typespec>;
  has_varargs: bool;
  ret: &Typespec;
}

struct FuncParam {
  pos: SrcPos;
  name: *const char;
  type: &Typespec;
  // TODO Support default values!
  default_val: &Expr;
}

struct TypeArg {
  pos: SrcPos;
  val: &Typespec;
}

struct AggregateItem {
  pos: SrcPos;
  // Kind names apply only to unions ...
  kind_names: Slice<*const char>;
  union switch {
    None => :void;
    Field => struct {
      names: Slice<*const char>;
      type: &Typespec;
    }
    Subaggregate => subaggregate: &Aggregate;
  }
}

struct EnumItem {
  pos: SrcPos;
  name: *const char;
  init: &Expr;
}

struct ImportItem {
  name: *const char;
  rename: *const char;
}

enum AggregateKind {
  None,
  Struct,
  Union,
}

struct Aggregate {
  pos: SrcPos;
  kind: AggregateKind;
  items: Slice<AggregateItem>;
  union_enum_decl: &Decl;
}

union SymRef switch {
  // More precisely, a name ref, but this includes pos.
  Expr => expr: &Expr;
  // Again a name typespec.
  Type => type: &Typespec;
}

struct Decl {
  pos: SrcPos;
  name: *const char;
  notes: Slice<Note>;
  is_generic: bool;
  is_incomplete: bool;
  type_params: Slice<Decl>;
  refs: Slice<SymRef>;
  // For generic specializations.
  generic_base: &Decl;
  type_args: Slice<TypeArg>;
  shallow: bool;
  // Custom decl kinds.
  union switch {
    None => :void;
    Note => note: Note;
    Enum => enum_decl: DeclEnum;
    Struct, Union => aggregate: &Aggregate;
    Func => function: DeclFunc;
    Typedef => typedef_decl: DeclTypedef;
    // This is an example of wanting different names for the same thing ...
    Var => var_decl: DeclVar;
    Const => const_decl: DeclVar;
    Import => import_decl: DeclImport;
  }
}

struct DeclEnum {
  type: &Typespec;
  items: Slice<EnumItem>;
  scope: *const char;
}

struct DeclFunc {
  params: Slice<FuncParam>;
  ret_type: &Typespec;
  has_varargs: bool;
  block: StmtList;
}

struct DeclTypedef {
  constraint: &Typespec;
  val: &Typespec;
}

struct DeclVar {
  type: &Typespec;
  expr: &Expr;
}

struct DeclImport {
  is_relative: bool;
  names: Slice<*const char>;
  import_all: bool;
  items: Slice<ImportItem>;
}

struct CompoundField {
  pos: SrcPos;
  init: &Expr;
  union switch {
    Default => :void;
    Name => name: *const char;
    Index => index: &Expr;
  }
}

struct Expr {
  pos: SrcPos;
  union switch {
    None => :void;
    Int => int_lit: ExprIntLit;
    Float => float_lit: ExprFloatLit;
    Str => str_lit: ExprStrLit;
    Name => struct {
      name: *const char;
      type_args: Slice<TypeArg>;
      // Assigned during resolution.
      decl: &Decl;
    }
    // TODO Keep Paren or just pull expr up?
    AlignofExpr, SizeofExpr, TypeofExpr, Paren => arg: &Expr;
    AlignofType, SizeofType, TypeofType => type_arg: &Typespec;
    Offsetof => offsetof_field: ExprOffsetofField;
    Compound => compound: ExprCompound;
    Cast => cast: ExprCast;
    Modify => modify: ExprModify;
    Unary => unary: ExprUnary;
    Binary => binary: ExprBinary;
    Ternary => ternary: ExprTernary;
    Call => call: ExprCall;
    Index => index: ExprIndex;
    Field => field: ExprField;
  }
}

struct ExprIntLit {
  val: ullong;
  mod: TokenMod;
  suffix: TokenSuffix;
}

struct ExprFloatLit {
  start: *const char;
  end: *const char;
  val: double;
  suffix: TokenSuffix;
}

struct ExprStrLit {
  val: *const char;
  mod: TokenMod;
}

struct ExprOffsetofField {
  type: &Typespec;
  name: *const char;
}

struct ExprCompound {
  type: &Typespec;
  fields: Slice<CompoundField>;
  union switch {
    // List can mean array or slice or maybe others later ...
    List => length: &Expr;
    Struct, Tuple => :void;
  }
}

struct ExprCast {
  type: &Typespec;
  expr: &Expr;
}

struct ExprModify {
  op: TokenKind;
  post: bool;
  expr: &Expr;
}

struct ExprUnary {
  op: TokenKind;
  expr: &Expr;
}

struct ExprBinary {
  op: TokenKind;
  left: &Expr;
  right: &Expr;
}

struct ExprTernary {
  cond: &Expr;
  then_expr: &Expr;
  else_expr: &Expr;
}

struct ExprCall {
  expr: &Expr;
  args: Slice<&Expr>;
}

struct ExprIndex {
  expr: &Expr;
  index: &Expr;
}

struct ExprField {
  expr: &Expr;
  name: *const char;
  type_args: Slice<TypeArg>;
}

struct ElseIf {
  cond: &Expr;
  block: StmtList;
}

struct SwitchCasePattern {
  is_default: bool;
  start: &Expr;
  end: &Expr;
}

struct SwitchCase {
  patterns: Slice<SwitchCasePattern>;
  block: StmtList;
}

struct Stmt {
  notes: Slice<Note>;
  pos: SrcPos;
  union switch {
    None, Break, Continue => :void;
    DoWhile, While => while_stmt: StmtWhile;
    Expr, Return => expr: &Expr;
    Goto, Label => label: *const char;
    Assign => assign: StmtAssign;
    Block => block: StmtList;
    For => for_stmt: StmtFor;
    ForEach => for_each: StmtForEach;
    If => if_stmt: StmtIf;
    Init => init: StmtInit;
    Note => note: Note;
    Switch => switch_stmt: StmtSwitch;
    Close => tag: Stmt.Kind;
  }
}

struct StmtIf {
  init: &Stmt;
  cond: &Expr;
  then_block: StmtList;
  elseifs: Slice<ElseIf>;
  else_block: StmtList;
}

struct StmtWhile {
  cond: &Expr;
  block: StmtList;
}

struct StmtFor {
  init: &Stmt;
  cond: &Expr;
  next: &Stmt;
  block: StmtList;
}

struct StmtForEach {
  expr: &Expr;
  get_ref: bool;
  func: DeclFunc;
  // Filled in during resolution.
  // We want to remember even if there are no matching expressions.
  // TODO Is this the new biggest statement type, making all else bigger?
  length_type: &Type;
}

struct StmtSwitch {
  expr: &Expr;
  cases: Slice<SwitchCase>;
}

struct StmtAssign {
  op: TokenKind;
  left: &Expr;
  right: &Expr;
}

struct StmtInit {
  name: *const char;
  is_mut: bool;
  type: &Typespec;
  expr: &Expr;
}

// Support code.

let ast_arena: Arena;

fn ast_alloc(size: usize) -> &void {
  #assert(size != 0);
  let ptr = arena_alloc(&ast_arena, size);
  memset(ptr, 0, size);
  return ptr;
}

fn ast_dup_sized(src: &const void, size: usize) -> &void {
  if (size == 0) {
    return NULL;
  }
  let ptr = arena_alloc(&ast_arena, size);
  memcpy(ptr, src, size);
  return ptr;
}

fn ast_dup<Node>(src: &const Node) -> &Node {
  return ast_dup_sized(src, sizeof(*src));
}

fn ast_dup_slice<Node>(src: const Slice<Node>) -> Slice<Node> {
  let items = ast_dup_sized(src.items, src.length * sizeof(*src.items));
  return {items, src.length};
}

fn ast_dup_type_params(d: &Decl, params: Slice<Decl>) {
  if (params.length) {
    d.type_params = ast_dup_slice.<Decl>(params);
    buf_free((:&&void)&params.items);
  }
}

fn new_note(pos: SrcPos, name: *const char, args: Slice<NoteArg>) -> Note {
  return {pos: pos, name: name, args: ast_dup_slice.<NoteArg>(args)};
}

fn new_notes(notes: Slice<Note>) -> Slice<Note> {
  return ast_dup_slice.<Note>(notes);
}

fn new_stmt_list(pos: SrcPos, stmts: Slice<&Stmt>) -> StmtList {
  return {pos, ast_dup_slice.<&Stmt>(stmts)};
}

fn new_typespec(kind: Typespec.Kind, pos: SrcPos) -> &Typespec {
  let t: &Typespec = ast_alloc(sizeof(Typespec));
  t.kind = kind;
  t.pos = pos;
  return t;
}

fn new_typespec_name1(pos: SrcPos, name: *const char) -> &Typespec {
  return new_typespec_name(pos, {&{name: name}, 1});
}

fn new_typespec_name(pos: SrcPos, names: Slice<TypespecName>) -> &Typespec {
  let t = new_typespec(Typespec.Name, pos);
  t.names = ast_dup_slice.<TypespecName>(names);
  return t;
}

fn new_typespec_ptr(pos: SrcPos, base: &Typespec, is_owned: bool) -> &Typespec {
  let t = new_typespec(Typespec.Ptr, pos);
  t.base = base;
  t.is_owned = is_owned;
  return t;
}

fn new_typespec_ref(pos: SrcPos, base: &Typespec, is_owned: bool) -> &Typespec {
  let t = new_typespec(Typespec.Ref, pos);
  t.base = base;
  t.is_owned = is_owned;
  return t;
}

fn new_typespec_const(pos: SrcPos, base: &Typespec) -> &Typespec {
  let t = new_typespec(Typespec.Const, pos);
  t.base = base;
  return t;
}

fn new_typespec_array(pos: SrcPos, elem: &Typespec, size: &Expr) -> &Typespec {
  let t = new_typespec(Typespec.Array, pos);
  t.base = elem;
  t.num_elems = size;
  return t;
}

fn new_typespec_func(
  pos: SrcPos, args: Slice<&Typespec>, ret: &Typespec, has_varargs: bool,
) -> &Typespec {
  let t = new_typespec(Typespec.Func, pos);
  t.function.args = ast_dup_slice.<&Typespec>(args);
  t.function.ret = ret;
  t.function.has_varargs = has_varargs;
  return t;
}

fn new_decls(decls: Slice<&Decl>) -> &Slice<&Decl> {
  let d: &Slice<&Decl> = ast_alloc(sizeof(:Slice<&Decl>));
  *d = ast_dup_slice.<&Decl>(decls);
  return d;
}

fn new_decl(kind: Decl.Kind, pos: SrcPos, name: *const char) -> &Decl {
  let d: &Decl = ast_alloc(sizeof(Decl));
  d.kind = kind;
  d.pos = pos;
  d.name = name;
  return d;
}

fn get_decl_note(decl: &Decl, name: *const char) -> &Note {
  return get_note(&decl.notes, name);
}

fn get_note(notes: &Slice<Note>, name: *const char) -> &Note {
  for &(notes) do(note) {
    if (note.name == name) {
      return note;
    }
  }
  return NULL;
}

fn get_subunion(items: Slice<AggregateItem>) -> &Aggregate {
  // See if we are a struct with a subunion.
  let result: &Aggregate;
  for &(items) do(item) {
    if (item.kind == AggregateItem.Subaggregate) {
      if (item.subaggregate.kind == AggregateKind.Union) {
        // But only one subunion here is allowed.
        if (result) {
          fatal_error(item.subaggregate.pos, "Multiple unions in struct");
          return NULL;
        }
        result = item.subaggregate;
      }
    }
  }
  return result;
}

fn is_decl_foreign(decl: &Decl) -> bool {
  return get_decl_note(decl, foreign_name) != NULL;
}

fn new_decl_enum(
  pos: SrcPos, name: *const char, type: &Typespec, items: Slice<EnumItem>,
) -> &Decl {
  let d = new_decl(Decl.Enum, pos, name);
  d.enum_decl.type = type;
  d.enum_decl.items = ast_dup_slice.<EnumItem>(items);
  return d;
}

fn new_aggregate(
  pos: SrcPos, kind: AggregateKind, items: Slice<AggregateItem>,
) -> &Aggregate {
  let aggregate: &Aggregate = ast_alloc(sizeof(Aggregate));
  aggregate.pos = pos;
  aggregate.kind = kind;
  aggregate.items = ast_dup_slice.<AggregateItem>(items);
  if (items.length) {
    // This is safe for our usage, but how to define generally? Use `own`.
    buf_free((:&&void)&items.items);
  }
  return aggregate;
}

fn new_decl_aggregate(
  pos: SrcPos, kind: Decl.Kind, name: *const char, params: Slice<Decl>,
  aggregate: &Aggregate,
) -> &Decl {
  #assert(kind == Decl.Struct || kind == Decl.Union);
  let d = new_decl(kind, pos, name);
  ast_dup_type_params(d, params);
  d.aggregate = aggregate;
  return d;
}

fn new_decl_var(pos: SrcPos, name: *const char, type: &Typespec, expr: &Expr) -> &Decl {
  let d = new_decl(Decl.Var, pos, name);
  d.var_decl.type = type;
  d.var_decl.expr = expr;
  return d;
}

fn new_decl_func(
  pos: SrcPos, name: *const char, type_params: Slice<Decl>,
  params: Slice<FuncParam>, ret_type: &Typespec, has_varargs: bool,
  block: StmtList,
) -> &Decl {
  let d = new_decl(Decl.Func, pos, name);
  ast_dup_type_params(d, type_params);
  init_func(&d.function, params, ret_type, has_varargs, block);
  return d;
}

fn init_func(
  func: &DeclFunc,
  params: Slice<FuncParam>, ret_type: &Typespec, has_varargs: bool,
  block: StmtList,
) {
  func.params = ast_dup_slice.<FuncParam>(params);
  func.ret_type = ret_type;
  func.has_varargs = has_varargs;
  func.block = block;
}

fn new_decl_const(pos: SrcPos, name: *const char, type: &Typespec, expr: &Expr) -> &Decl {
  let d = new_decl(Decl.Const, pos, name);
  d.const_decl.type = type;
  d.const_decl.expr = expr;
  return d;
}

fn new_decl_typedef(pos: SrcPos, name: *const char, val: &Typespec) -> &Decl {
  let d = new_decl(Decl.Typedef, pos, name);
  d.typedef_decl.val = val;
  return d;
}

fn new_decl_note(pos: SrcPos, note: Note) -> &Decl {
  let d = new_decl(Decl.Note, pos, NULL);
  d.note = note;
  return d;
}

fn new_decl_import(
  pos: SrcPos, rename_name: *const char, is_relative: bool,
  names: Slice<*const char>, import_all: bool, items: Slice<ImportItem>,
) -> &Decl {
  let d = new_decl(Decl.Import, pos, NULL);
  d.name = rename_name;
  d.import_decl.is_relative = is_relative;
  d.import_decl.names = ast_dup_slice.<*const char>(names);
  d.import_decl.import_all = import_all;
  d.import_decl.items = ast_dup_slice.<ImportItem>(items);
  return d;
}

fn new_expr(kind: Expr.Kind, pos: SrcPos) -> &Expr {
  let e: &Expr = ast_alloc(sizeof(Expr));
  e.kind = kind;
  e.pos = pos;
  return e;
}

fn new_expr_paren(pos: SrcPos, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.Paren, pos);
  e.arg = expr;
  return e;
}

fn new_expr_sizeof_expr(pos: SrcPos, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.SizeofExpr, pos);
  e.arg = expr;
  return e;
}

fn new_expr_sizeof_type(pos: SrcPos, type: &Typespec) -> &Expr {
  let e = new_expr(Expr.SizeofType, pos);
  e.type_arg = type;
  return e;
}

fn new_expr_typeof_expr(pos: SrcPos, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.TypeofExpr, pos);
  e.arg  = expr;
  return e;
}

fn new_expr_typeof_type(pos: SrcPos, type: &Typespec) -> &Expr {
  let e = new_expr(Expr.TypeofType, pos);
  e.type_arg = type;
  return e;
}

fn new_expr_alignof_expr(pos: SrcPos, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.AlignofExpr, pos);
  e.arg = expr;
  return e;
}

fn new_expr_alignof_type(pos: SrcPos, type: &Typespec) -> &Expr {
  let e = new_expr(Expr.AlignofType, pos);
  e.type_arg = type;
  return e;
}

fn new_expr_offsetof(pos: SrcPos, type: &Typespec, name: *const char) -> &Expr {
  let e = new_expr(Expr.Offsetof, pos);
  e.offsetof_field.type = type;
  e.offsetof_field.name = name;
  return e;
}

fn new_expr_modify(pos: SrcPos, op: TokenKind, post: bool, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.Modify, pos);
  e.modify.op = op;
  e.modify.post = post;
  e.modify.expr = expr;
  return e;
}

fn new_expr_int(pos: SrcPos, val: ullong, mod: TokenMod, suffix: TokenSuffix) -> &Expr {
  let e = new_expr(Expr.Int, pos);
  e.int_lit.val = val;
  e.int_lit.mod = mod;
  e.int_lit.suffix = suffix;
  return e;
}

fn new_expr_float(pos: SrcPos, start: *const char, end: *const char, val: double, suffix: TokenSuffix) -> &Expr {
  let e = new_expr(Expr.Float, pos);
  e.float_lit.start = start;
  e.float_lit.end = end;
  e.float_lit.val = val;
  e.float_lit.suffix = suffix;
  return e;
}

fn new_expr_str(pos: SrcPos, val: *const char, mod: TokenMod) -> &Expr {
  let e = new_expr(Expr.Str, pos);
  e.str_lit.val = val;
  e.str_lit.mod = mod;
  return e;
}

fn new_expr_name(pos: SrcPos, name: *const char) -> &Expr {
  let e = new_expr(Expr.Name, pos);
  e.name = name;
  return e;
}

fn new_expr_compound(
  pos: SrcPos, kind: ExprCompound.Kind, type: &Typespec,
  fields: Slice<CompoundField>,
) -> &Expr {
  let e = new_expr(Expr.Compound, pos);
  e.compound.kind = kind;
  e.compound.type = type;
  e.compound.fields = ast_dup_slice.<CompoundField>(fields);
  return e;
}

fn new_expr_cast(pos: SrcPos, type: &Typespec, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.Cast, pos);
  e.cast.type = type;
  e.cast.expr = expr;
  return e;
}

fn new_expr_call(pos: SrcPos, expr: &Expr, args: Slice<&Expr>) -> &Expr {
  let e = new_expr(Expr.Call, pos);
  e.call.expr = expr;
  e.call.args = ast_dup_slice.<&Expr>(args);
  return e;
}

fn new_expr_index(pos: SrcPos, expr: &Expr, index: &Expr) -> &Expr {
  let e = new_expr(Expr.Index, pos);
  e.index.expr = expr;
  e.index.index = index;
  return e;
}

fn new_expr_field(pos: SrcPos, expr: &Expr, name: *const char) -> &Expr {
  let e = new_expr(Expr.Field, pos);
  e.field.expr = expr;
  e.field.name = name;
  return e;
}

fn new_expr_unary(pos: SrcPos, op: TokenKind, expr: &Expr) -> &Expr {
  let e = new_expr(Expr.Unary, pos);
  e.unary.op = op;
  e.unary.expr = expr;
  return e;
}

fn new_expr_binary(pos: SrcPos, op: TokenKind, left: &Expr, right: &Expr) -> &Expr {
  let e = new_expr(Expr.Binary, pos);
  e.binary.op = op;
  e.binary.left = left;
  e.binary.right = right;
  return e;
}

fn new_expr_ternary(pos: SrcPos, cond: &Expr, then_expr: &Expr, else_expr: &Expr) -> &Expr {
  let e = new_expr(Expr.Ternary, pos);
  e.ternary.cond = cond;
  e.ternary.then_expr = then_expr;
  e.ternary.else_expr = else_expr;
  return e;
}

fn get_stmt_note(stmt: &Stmt, name: *const char) -> &Note {
  for &(stmt.notes) do(note) {
    if (note.name == name) {
      return note;
    }
  }
  return NULL;
}

fn new_stmt(kind: Stmt.Kind, pos: SrcPos) -> &Stmt {
  let s: &Stmt = ast_alloc(sizeof(Stmt));
  s.kind = kind;
  s.pos = pos;
  return s;
}

fn new_stmt_label(pos: SrcPos, label: *const char) -> &Stmt {
  let s = new_stmt(Stmt.Label, pos);
  s.label = label;
  return s;
}

fn new_stmt_goto(pos: SrcPos, label: *const char) -> &Stmt {
  let s = new_stmt(Stmt.Goto, pos);
  s.label = label;
  return s;
}

fn new_stmt_note(pos: SrcPos, note: Note) -> &Stmt {
  let s = new_stmt(Stmt.Note, pos);
  s.note = note;
  return s;
}

fn new_stmt_return(pos: SrcPos, expr: &Expr) -> &Stmt {
  let s = new_stmt(Stmt.Return, pos);
  s.expr = expr;
  return s;
}

fn new_stmt_break(pos: SrcPos) -> &Stmt {
  return new_stmt(Stmt.Break, pos);
}

fn new_stmt_continue(pos: SrcPos) -> &Stmt {
  return new_stmt(Stmt.Continue, pos);
}

fn new_stmt_block(pos: SrcPos, block: StmtList) -> &Stmt {
  let s = new_stmt(Stmt.Block, pos);
  s.block = block;
  return s;
}

fn new_stmt_close(pos: SrcPos, tag: Stmt.Kind) -> &Stmt {
  let s = new_stmt(Stmt.Close, pos);
  s.tag = tag;
  return s;
}

fn new_stmt_if(
  pos: SrcPos, init: &Stmt, cond: &Expr, then_block: StmtList,
  elseifs: Slice<ElseIf>, else_block: StmtList,
) -> &Stmt {
  let s = new_stmt(Stmt.If, pos);
  s.if_stmt.init = init;
  s.if_stmt.cond = cond;
  s.if_stmt.then_block = then_block;
  s.if_stmt.elseifs = ast_dup_slice.<ElseIf>(elseifs);
  s.if_stmt.else_block = else_block;
  return s;
}

fn new_stmt_while(pos: SrcPos, cond: &Expr, block: StmtList) -> &Stmt {
  let s = new_stmt(Stmt.While, pos);
  s.while_stmt.cond = cond;
  s.while_stmt.block = block;
  return s;
}

fn new_stmt_do_while(pos: SrcPos, cond: &Expr, block: StmtList) -> &Stmt {
  let s = new_stmt(Stmt.DoWhile, pos);
  s.while_stmt.cond = cond;
  s.while_stmt.block = block;
  return s;
}

fn new_stmt_for_each(
  pos: SrcPos, get_ref: bool, expr: &Expr, params: Slice<FuncParam>,
  block: StmtList,
) -> &Stmt {
  let s = new_stmt(Stmt.ForEach, pos);
  s.for_each.expr = expr;
  s.for_each.get_ref = get_ref;
  init_func(&s.for_each.func, params, NULL, false, block);
  return s;
}

fn new_stmt_for(pos: SrcPos, init: &Stmt, cond: &Expr, next: &Stmt, block: StmtList) -> &Stmt {
  let s = new_stmt(Stmt.For, pos);
  s.for_stmt.init = init;
  s.for_stmt.cond = cond;
  s.for_stmt.next = next;
  s.for_stmt.block = block;
  return s;
}

fn new_stmt_switch(
  pos: SrcPos, expr: &Expr, cases: Slice<SwitchCase>,
) -> &Stmt {
  let s = new_stmt(Stmt.Switch, pos);
  s.switch_stmt.expr = expr;
  s.switch_stmt.cases = ast_dup_slice.<SwitchCase>(cases);
  return s;
}

fn new_stmt_assign(pos: SrcPos, op: TokenKind, left: &Expr, right: &Expr) -> &Stmt {
  let s = new_stmt(Stmt.Assign, pos);
  s.assign.op = op;
  s.assign.left = left;
  s.assign.right = right;
  return s;
}

fn new_stmt_init(pos: SrcPos, name: *const char, is_mut: bool, type: &Typespec, expr: &Expr) -> &Stmt {
  let s = new_stmt(Stmt.Init, pos);
  s.init.name = name;
  s.init.is_mut = is_mut;
  s.init.type = type;
  s.init.expr = expr;
  return s;
}

fn new_stmt_expr(pos: SrcPos, expr: &Expr) -> &Stmt {
  let s = new_stmt(Stmt.Expr, pos);
  s.expr = expr;
  return s;
}
