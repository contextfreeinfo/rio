typedef MapClosureCall = fn(self: &void, item: Any) -> &void;

struct MapClosure {
  self: &void;
  call: MapClosureCall;
}

struct TypeMap {
  type_args: TypeArgSlice;
  type_params: DeclSlice;
}

fn dupe_aggregate(aggregate: &Aggregate, map: &MapClosure) -> &Aggregate {
  let dupe: &Aggregate = map.call(map.self, Any{aggregate, typeof(*aggregate)});
  if (dupe) {
    return dupe;
  }
  dupe = ast_dup(aggregate, sizeof(*aggregate));
  dupe.items = ast_dup(dupe.items, sizeof(*dupe.items) * dupe.num_items);
  for (let i: usize = 0; i < dupe.num_items; ++i) {
    let item = &dupe.items[i];
    // These are value, not pointer, so presume any modifications are in place.
    map.call(map.self, Any{item, typeof(*item)});
    // Now go deeper.
    @complete
    switch (item.kind) {
      Field => {
        item.type = dupe_typespec(item.type, map);
      }
      Subaggregate => {
        item.subaggregate = dupe_aggregate(item.subaggregate, map);
      }
    }
  }
  return dupe;
}

fn dupe_typespec(type: &Typespec, map: &MapClosure) -> &Typespec {
  let dupe: &Typespec = map.call(map.self, Any{type, typeof(*type)});
  if (dupe) {
    return dupe;
  }
  dupe = ast_dup(type, sizeof(*type));
  switch (type.kind) {
    Array, Const, Ptr, Ref => {
      printf("Recurse on base type!\n");
      dupe.base = dupe_typespec(type.base, map);
    }
    Func => {
      printf("Go into function definition!\n");
    }
    default => {}
  }
  return dupe;
}

fn get_type_sym_name(type: &Type) -> *char {
  let buf: *char = NULL;
  put_type_sym_name(&buf, type);
  return buf;
}

fn map_type_args(self: &TypeMap, item: Any) -> &void {
  switch (item.type) {
    typeof(Aggregate) => {
      // Let these be copied.
      printf("Copy that agg!\n");
      return NULL;
    }
    typeof(Typespec) => {
      let type: &Typespec = item.ptr;
      switch (type.kind) {
        Typespec.Name => {
          printf("Could be mapping!\n");
          let decl = type.decl;
          let params = self.type_params;
          for (let i = 0; i < params.length; ++i) {
            if (decl == &params.items[i]) {
              let arg = &self.type_args.items[i];
              if (true) {
                // Remove this once good to go.
                let arg_name = get_type_name(resolve_typespec(arg.val));
                printf("Found it! %s -> %s\n", decl.name, arg_name);
                buf_free((:*&void)&arg_name);
              }
              return arg.val;
            }
          }
          return item.ptr;
        }
        default => {
          printf("Copy that type!\n");
          return NULL;
        }
      }
    }
    default => {
      printf("Whatever!\n");
      return item.ptr;
    }
  }
}

fn put_type_sym_name(buf: **char, type: &Type) {
  let type_name = type_names[type.kind];
  if (type_name) {
    buf_printf(buf, "%s", type_name);
  } else {
    @complete
    switch (type.kind) {
      Struct, Union, Enum, Incomplete => {
        #assert(type.sym);
        buf_printf(buf, "%s", type.sym.name);
      }
      Const => {
        buf_printf(buf, "const_");
        put_type_name(buf, type.base);
      }
      Ptr => {
        buf_printf(buf, "ptr_");
        put_type_name(buf, type.base);
      }
      Ref => {
        buf_printf(buf, "ref_");
        put_type_name(buf, type.base);
      }
      Array => {
        buf_printf(buf, "array%zu_", type.num_elems);
        put_type_name(buf, type.base);
      }
      Func => {
        buf_printf(buf, "fn_");
        for (let i: usize = 0; i < type.function.num_params; i++) {
          if (i != 0) {
            buf_printf(buf, "_");
          }
          put_type_name(buf, type.function.params[i]);
        }
        if (type.function.has_varargs) {
          buf_printf(buf, "___");
        }
        if (type.function.ret != type_void) {
          buf_printf(buf, "_to_");
          put_type_name(buf, type.function.ret);
        }
      }
    } switch;
  } if;
}
