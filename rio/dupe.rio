typedef MapClosureCall = fn(self: &void, item: Any) -> &void;

struct MapClosure {
  self: &void;
  call: MapClosureCall;
}

struct TypeMap {
  type_args: Slice<TypeArg>;
  type_params: Slice<Decl>;
}

fn dupe_aggregate(aggregate: &Aggregate, map: &MapClosure) -> &Aggregate {
  let dupe: &Aggregate = map.call(map.self, Any{aggregate, typeof(*aggregate)});
  if (dupe) {
    return dupe;
  }
  dupe = ast_dup(aggregate, sizeof(*aggregate));
  dupe.items.items =
    ast_dup(dupe.items.items, sizeof(*dupe.items.items) * dupe.items.length);
  for &(dupe.items) do(item) {
    // These are value, not pointer, so presume any modifications are in place.
    map.call(map.self, Any{item, typeof(*item)});
    // Now go deeper.
    @complete
    switch (item.kind) {
      Field => {
        item.type = dupe_typespec(item.type, map);
      }
      Subaggregate => {
        item.subaggregate = dupe_aggregate(item.subaggregate, map);
      }
    }
  }
  return dupe;
}

fn dupe_block(block: StmtList, map: &MapClosure) -> StmtList {
  let dupe = &block;
  dupe.stmts.items =
    ast_dup(dupe.stmts.items, sizeof(*dupe.stmts.items) * dupe.stmts.length);
  for &(dupe.stmts) do(stmt) {
    *stmt = dupe_stmt(*stmt, map);
  }
  return *dupe;
}

fn dupe_expr(expr: &Expr, map: &MapClosure) -> &Expr {
  if (!expr) {
    return NULL;
  }
  let dupe: &Expr = ast_dup(expr, sizeof(*expr));
  @complete
  switch (dupe.kind) {
    AlignofExpr, SizeofExpr, TypeofExpr, Paren => {
      dupe.arg = dupe_expr(dupe.arg, map);
    }
    Float, Int, Str => {
      // Already good.
    }
    Name => {
      // TODO This is the important case!
      // TODO First we need to store decl when resolving!
    }
  }
  return expr;
}

fn dupe_function(func: &DeclFunc, map: &MapClosure) -> &DeclFunc {
  let dupe: &DeclFunc = ast_dup(func, sizeof(*func));
  dupe_function_fields(dupe, map);
  return dupe;
}

fn dupe_function_fields(dupe: &DeclFunc, map: &MapClosure) {
  dupe.params.items =
    ast_dup(dupe.params.items, sizeof(FuncParam) * dupe.params.length);
  for &(dupe.params) do(param) {
    *param = dupe_func_param(*param, map);
  }
  dupe.ret_type = dupe_typespec(dupe.ret_type, map);
  dupe.block = dupe_block(dupe.block, map);
}

fn dupe_func_param(param: FuncParam, map: &MapClosure) -> FuncParam {
  let dupe = &param;
  dupe.type = dupe_typespec(dupe.type, map);
  if (dupe.default_val) {
    dupe.default_val = dupe_expr(dupe.default_val, map);
  }
  return *dupe;
}

fn dupe_stmt(stmt: &Stmt, map: &MapClosure) -> &Stmt {
  let dupe: &Stmt = ast_dup(stmt, sizeof(*stmt));
  // Let notes (?) and pos alone, but look into statement content.
  @complete
  switch (dupe.kind) {
    Assign => {
      let assign = &stmt.assign;
      assign.left = dupe_expr(assign.left, map);
      assign.right = dupe_expr(assign.right, map);
    }
    Block => {
      dupe.block = dupe_block(dupe.block, map);
    }
    Break, Close, Continue, Goto, Label, Note => {
      // Keep untouched.
      // Might be good to avoid having duped in the first place, but we likely
      // have more costs elsewhere, like needlessly duping whole blocks.
    }
    DoWhile, While => {
      let while_stmt = &dupe.while_stmt;
      while_stmt.cond = dupe_expr(while_stmt.cond, map);
      while_stmt.block = dupe_block(while_stmt.block, map);
    }
    Expr, Return => {
      dupe.expr = dupe_expr(dupe.expr, map);
    }
    For => {
      let for_stmt = &dupe.for_stmt;
      for_stmt.init = dupe_stmt(for_stmt.init, map);
      for_stmt.cond = dupe_expr(for_stmt.cond, map);
      for_stmt.next = dupe_stmt(for_stmt.next, map);
      for_stmt.block = dupe_block(for_stmt.block, map);
    }
    ForEach => {
      let for_each = &dupe.for_each;
      for_each.expr = dupe_expr(for_each.expr, map);
      dupe_function_fields(&for_each.func, map);
      // The length_type is to be filled in during resolution.
    }
    If => {
      let if_stmt = &dupe.if_stmt;
      if_stmt.init = dupe_stmt(if_stmt.init, map);
      if_stmt.cond = dupe_expr(if_stmt.cond, map);
      if_stmt.then_block = dupe_block(if_stmt.then_block, map);
      // TODO Generify ast_dup for slices once we have generic functions.
      if_stmt.elseifs.items = ast_dup(
        if_stmt.elseifs.items,
        sizeof(*if_stmt.elseifs.items) * if_stmt.elseifs.length,
      );
      for &(if_stmt.elseifs) do(elseif) {
        elseif.cond = dupe_expr(elseif.cond, map);
        elseif.block = dupe_block(elseif.block, map);
      }
      if_stmt.else_block = dupe_block(if_stmt.else_block, map);
    }
    Init => {
      let init = &dupe.init;
      init.type = dupe_typespec(init.type, map);
      init.expr = dupe_expr(init.expr, map);
    }
    Switch => {
      let switch_stmt = &dupe.switch_stmt;
      switch_stmt.expr = dupe_expr(switch_stmt.expr, map);
      switch_stmt.cases.items = ast_dup(
        switch_stmt.cases.items,
        sizeof(*switch_stmt.cases.items) * switch_stmt.cases.length,
      );
      for &(switch_stmt.cases) do(case_) {
        case_.patterns.items = ast_dup(
          case_.patterns.items,
          sizeof(*case_.patterns.items) * case_.patterns.length,
        );
        for &(case_.patterns) do(pattern) {
          pattern.start = dupe_expr(pattern.start, map);
          pattern.end = dupe_expr(pattern.end, map);
        }
        case_.block = dupe_block(case_.block, map);
      }
    }
  }
  return stmt;
}

fn dupe_typespec(type: &Typespec, map: &MapClosure) -> &Typespec {
  if (!type) {
    return NULL;
  }
  let dupe: &Typespec = map.call(map.self, Any{type, typeof(*type)});
  if (dupe) {
    return dupe;
  }
  dupe = ast_dup(type, sizeof(*type));
  switch (type.kind) {
    Array, Const, Ptr, Ref => {
      dupe.base = dupe_typespec(type.base, map);
    }
    Func => {
      fatal_error(type.pos, "Function types not yet supported in generics\n");
    }
    default => {}
  }
  return dupe;
}

fn get_typespec_sym_name(type: &Typespec) -> own *char {
  let buf: *char;
  put_typespec_sym_name(&buf, type);
  return buf;
}

fn map_type_args(self: &TypeMap, item: Any) -> &void {
  switch (item.type) {
    typeof(Aggregate) => {
      // Let these be copied so we can make changes inside.
      return NULL;
    }
    typeof(Typespec) => {
      let type: &Typespec = item.ptr;
      switch (type.kind) {
        Typespec.Name => {
          // See if this is a reference to a type parameter.
          let decl = type.decl;
          let params = self.type_params;
          for &(params) do(param, i) {
            if (decl == param) {
              // Yep. Found it.
              let arg = &self.type_args[i];
              return arg.val;
            }
          }
          // Nope. Just let it be.
          return item.ptr;
        }
        default => {
          // Let others be copied so we can make changes inside.
          return NULL;
        }
      }
    }
    default => {
      // Let these move on.
      return item.ptr;
    }
  }
}

fn put_typespec_sym_name(buf: **char, type: &Typespec) {
  @complete
  switch (type.kind) {
    Name => {
      // This is the perceived type, which is what we want for mangling, so the
      // programmer has some manual control.
      for &(type.names) do(name, i) {
        if (i) {
          buf_printf(buf, "_");
        }
        buf_printf(buf, "%s", name.name);
        // And args, too.
        for &(name.type_args) do(type_arg) {
          buf_printf(buf, "_");
          put_typespec_sym_name(buf, type_arg.val);
        }
      }
    }
    Const => {
      buf_printf(buf, "const_");
      put_typespec_sym_name(buf, type.base);
    }
    Ptr => {
      buf_printf(buf, "ptr_");
      put_typespec_sym_name(buf, type.base);
    }
    Ref => {
      buf_printf(buf, "ref_");
      put_typespec_sym_name(buf, type.base);
    }
    Array => {
      // TODO Do want to resolve the constant count or to convert the expression
      // TODO to a string, or just force typedefs????
      // buf_printf(buf, "array%zu_", type.num_elems);
      buf_printf(buf, "array_");
      put_typespec_sym_name(buf, type.base);
    }
    Func => {
      let function = &type.function;
      buf_printf(buf, "fn_");
      for (type.function.args) do(arg, i) {
        if (i) {
          buf_printf(buf, "_");
        }
        put_typespec_sym_name(buf, arg);
      }
      if (type.function.has_varargs) {
        buf_printf(buf, "_etc");
      }
      if (type.function.ret) {
        buf_printf(buf, "_to_");
        put_typespec_sym_name(buf, type.function.ret);
      }
    }
  } switch;
}
