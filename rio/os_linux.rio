#foreign(header = "<dirent.h>")
#foreign(preamble = "typedef struct dirent dirent;")

@foreign
const DT_DIR = 4;

@foreign
typedef DIR = void;

@foreign
struct dirent {
  d_name: *char;
  d_type: uchar;
}

@foreign
fn closedir(dirp: &DIR) -> int;

@foreign
fn opendir(name: *const char) -> &DIR;

@foreign
fn readdir(dir: &DIR) -> &dirent;

@foreign
fn realpath(path: *const char, resolved_path: *const char) -> *char;

@foreign
fn strdup(str: *const char) -> *char;

fn path_absolute(path: [MAX_PATH]char) {
  let rel_path: [MAX_PATH]char;
  path_copy(rel_path, path);
  realpath(rel_path, path);
}

fn dir_list_free(iter: &DirListIter) {
  if (iter.valid) {
    iter.valid = false;
    iter.error = false;
    closedir(iter.handle);
  }
}

fn dir_list_next(iter: &DirListIter) {
  if (!iter.valid) {
    return;
  }
  do {
    let entry = readdir(iter.handle);
    if (!entry) {
      dir_list_free(iter);
      return;
    }
    path_copy(iter.name, entry.d_name);
    iter.is_dir = entry.d_type & DT_DIR;
  } while (dir_excluded(iter));
}

fn dir_list(iter: &DirListIter, path: *const char) {
  memset(iter, 0, sizeof(*iter));
  let dir = opendir(path);
  if (!dir) {
    iter.valid = false;
    iter.error = true;
    return;
  }
  iter.handle = dir;
  path_copy(iter.base, path);
  iter.valid = true;
  dir_list_next(iter);
}
