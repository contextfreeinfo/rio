enum { MAX_SEARCH_PATHS = 256 }
let static_package_search_paths: [MAX_SEARCH_PATHS]*const char;
let package_search_paths: **const char = static_package_search_paths;
let num_package_search_paths: int;

fn add_package_search_path(path: *const char) {
  if (flag_verbose) {
    printf("Adding package search path %s\n", path);
  }
  package_search_paths[num_package_search_paths++] = str_intern(path);
}

fn add_package_search_path_range(start: *const char, end: *const char) {
  let path: [MAX_PATH]char;
  let len: usize = clamp_max(end - start, MAX_PATH - 1);
  memcpy(path, start, len);
  path[len] = 0;
  add_package_search_path(path);
}

fn init_package_search_paths() {
  let riohome_var = getenv("RIOHOME");
  if (!riohome_var) {
    printf("error: Set the environment variable RIOHOME to the Rio home directory (where system_packages is located)\n");
    exit(1);
  }
  let path: [MAX_PATH]char;
  path_copy(path, riohome_var);
  path_join(path, "system_packages");
  add_package_search_path(path);
  add_package_search_path(".");
  let riopath_var = getenv("RIOPATH");
  if (riopath_var) {
    let start = riopath_var;
    for (let ptr = riopath_var; *ptr; ptr++) {
      if (*ptr == ';') {
        add_package_search_path_range(start, ptr);
        start = ptr + 1;
      }
    }
    if (*start) {
      add_package_search_path(start);
    }
  }
}

fn init_compiler() {
  init_target();
  init_package_search_paths();
  init_keywords();
  init_builtin_types();
  map_put(&decl_note_names, declare_note_name, (:&void)1);
}

fn parse_env_vars() {
  let rioos_var = getenv("RIOOS");
  if (rioos_var) {
    let os = get_os(rioos_var);
    if (os == -1) {
      printf("Unknown target operating system in RIOOS environment variable: %s\n", rioos_var);
    } else {
      target_os = os;
    }
  }
  let rioarch_var = getenv("RIOARCH");
  if (rioarch_var) {
    let arch = get_arch(rioarch_var);
    if (arch == -1) {
      printf("Unknown target architecture in RIOARCH environment variable: %s\n", rioarch_var);
    } else {
      target_arch = arch;
    }
  }
}

fn rio_main(argc: int, argv: **const char, gen_all: fn(), extension: *const char) -> int {
  parse_env_vars();
  let output_name: *const char;
  let flag_check = false;
  add_flag_str("o", &output_name, "file", "Output file (default: out_<main-package>.c)");
  add_flag_enum("os", &target_os, "Target operating system", os_names, Os.Num);
  add_flag_enum("arch", &target_arch, "Target machine architecture", arch_names, Arch.Num);
  add_flag_bool("check", &flag_check, "Semantic checking with no code generation");
  add_flag_bool("lazy", &flag_lazy, "Only compile what's reachable from the main package");
  add_flag_bool("nosourcemap", &flag_nosourcemap, "Don't generate any source map information");
  add_flag_bool("notypeinfo", &flag_notypeinfo, "Don't generate any typeinfo tables");
  add_flag_bool("fullgen", &flag_fullgen, "Force full code generation even for non-reachable symbols");
  add_flag_bool("verbose", &flag_verbose, "Extra diagnostic information");
  let program_name = parse_flags(&argc, &argv);
  if (argc != 1) {
    printf("Usage: %s [flags] <main-package>\n", program_name);
    print_flags_usage();
    return 1;
  }
  let package_name = argv[0];
  if (flag_verbose) {
    printf("Target operating system: %s\n", os_names[target_os]);
    printf("Target architecture: %s\n", arch_names[target_arch]);
  }
  init_compiler();
  builtin_package = import_package("builtin");
  if (!builtin_package) {
    printf("error: Failed to compile package 'builtin'.\n");
    return 1;
  }
  builtin_package.external_name = str_intern("");
  let main_package = import_package(package_name);
  if (!main_package) {
    printf("error: Failed to compile package '%s'\n", package_name);
    return 1;
  }
  let main_name = str_intern("main");
  let main_sym = get_package_sym(main_package, main_name);
  if (!main_sym) {
    printf("error: No 'main' entry point defined in package '%s'\n", package_name);
    return 1;
  }
  main_sym.external_name = main_name;
  reachable_phase = ReachablePhase.Natural;
  resolve_sym(main_sym);
  for (let i: usize = 0; i < buf_len(package_list); i++) {
    if (package_list[i].always_reachable) {
      resolve_package_syms(package_list[i]);
    }
  }
  finalize_reachable_syms();
  if (flag_verbose) {
    printf("Reached %d symbols in %d packages from %s/main\n", (:int)buf_len(reachable_syms), (:int)buf_len(package_list), package_name);
  }
  if (!flag_lazy) {
    reachable_phase = ReachablePhase.Forced;
    for (let i: usize = 0; i < buf_len(package_list); i++) {
      resolve_package_syms(package_list[i]);
    }
    finalize_reachable_syms();
  }
  printf("Processed %d symbols in %d packages\n", (:int)buf_len(reachable_syms), (:int)buf_len(package_list));
  if (!flag_check) {
    let c_path: [MAX_PATH]char;
    if (output_name) {
      path_copy(c_path, output_name);
    } else {
      snprintf(c_path, sizeof(c_path), "out_%s.%s", package_name, extension);
    }
    gen_all();
    let c_code = gen_buf;
    gen_buf = NULL;
    if (!write_file(c_path, c_code, buf_len(c_code))) {
      printf("error: Failed to write file: %s\n", c_path);
      return 1;
    }
    printf("Generated %s\n", c_path);
  }
  return 0;
}
