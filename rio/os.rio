@foreign
const MAX_PATH = 256;

fn path_normalize(path: *char) {
  let ptr: *char;
  for (ptr = path; *ptr; ptr++) {
    if (*ptr == '\\') {
      *ptr = '/';
    }
  }
  if (ptr != path && ptr[-1] == '/') {
    ptr[-1] = 0;
  }
}

fn path_copy(path: [MAX_PATH]char, src: *const char) {
  strncpy(path, src, MAX_PATH);
  path[MAX_PATH - 1] = 0;
  path_normalize(path);
}

fn path_join(path: [MAX_PATH]char, src: *const char) {
  let ptr = path + strlen(path);
  if (ptr != path && ptr[-1] == '/') {
    ptr--;
  }
  if (*src == '/') {
    src++;
  }
  snprintf(ptr, path + MAX_PATH - ptr, "/%s", src);
}

fn path_file(path: [MAX_PATH]char) -> *char {
  path_normalize(path);
  for (let ptr = path + strlen(path); ptr != path; ptr--) {
    if (ptr[-1] == '/') {
      return ptr;
    }
  }
  return path;
}

fn path_ext(path: [MAX_PATH]char) -> *char {
  for (let ptr: *char = path + strlen(path); ptr != path; ptr--) {
    if (ptr[-1] == '.') {
      return ptr;
    }
  }
  return path;
}

struct DirListIter {
  valid: bool;
  error: bool;

  base: [MAX_PATH]char;
  name: [MAX_PATH]char;
  size: usize;
  is_dir: bool;

  handle: &void;
}

fn dir_excluded(iter: &DirListIter) -> bool {
  return iter.valid && (strcmp(iter.name, ".") == 0 || strcmp(iter.name, "..") == 0);
}

fn dir_list_subdir(iter: &DirListIter) -> bool {
  if (!iter.valid || !iter.is_dir) {
    return false;
  }
  let subdir_iter: DirListIter;
  path_join(iter.base, iter.name);
  dir_list(&subdir_iter, iter.base);
  dir_list_free(iter);
  *iter = subdir_iter;
  return true;
}

fn dir_list_buf(filespec: *const char) -> **const char {
  let buf: **const char = NULL;
  let iter: DirListIter;
  for (dir_list(&iter, filespec); iter.valid; dir_list_next(&iter)) {
    let name: *const char = strdup(iter.name);
    buf_push((:&&void)&buf, &name, sizeof(name));
  }
  return buf;
}

// Command line flag parsing

enum FlagKind {
  Bool,
  Str,
  Enum,
}

struct FlagDef {
  kind: FlagKind;
  name: *const char;
  help: *const char;
  options: **const char;
  arg_name: *const char;
  num_options: int;
  ptr: FlagDefPtr;
}

struct FlagDefPtr {
  i: &int;
  b: &bool;
  s: **const char;
}

let flag_defs: *FlagDef;

fn add_flag_bool(name: *const char, ptr: &bool, help: *const char) {
  let def: FlagDef = {kind = FlagKind.Bool, name = name, help = help, ptr = {b = ptr}};
  buf_push((:&&void)&flag_defs, &def, sizeof(def));
}

fn add_flag_str(name: *const char, ptr: **const char, arg_name: *const char, help: *const char) {
  let def: FlagDef = {kind = FlagKind.Str, name = name, help = help, arg_name = arg_name, ptr = {s = ptr}};
  buf_push((:&&void)&flag_defs, &def, sizeof(def));
}

fn add_flag_enum(name: *const char, ptr: &int, help: *const char, options: **const char, num_options: int) {
  let def: FlagDef = {kind = FlagKind.Enum, name = name, help = help, ptr = {i = ptr}, options = options, num_options = num_options};
  buf_push((:&&void)&flag_defs, &def, sizeof(def));
}

fn get_flag_def(name: *const char) -> &FlagDef {
  for (let i: usize = 0; i < buf_len(flag_defs); i++) {
    if (strcmp(flag_defs[i].name, name) == 0) {
      return &flag_defs[i];
    }
  }
  return NULL;
}

fn print_flags_usage() {
  printf("Flags:\n");
  for (let i: usize = 0; i < buf_len(flag_defs); i++) {
    let flag = flag_defs[i];
    let note: [256]char;
    let format: [256]char;
    switch (flag.kind) {
      Str => {
        snprintf(format, sizeof(format), "%s <%s>", flag.name, flag.arg_name ? flag.arg_name : (:*const char)"value");
        if (*flag.ptr.s) {
          snprintf(note, sizeof(note), "(default: %s)", *flag.ptr.s);
        }
      }
      Enum => {
        let end = format + sizeof(format);
        let ptr = format;
        ptr += snprintf(ptr, end - ptr, "%s <", flag.name);
        for (let k = 0; k < flag.num_options; k++) {
          ptr += snprintf(ptr, end - ptr, "%s%s", k == 0 ? "" : "|", flag.options[k]);
          if (k == *flag.ptr.i) {
            snprintf(note, sizeof(note), " (default: %s)", flag.options[k]);
          }
        }
        snprintf(ptr, end - ptr, ">");
      }
      Bool, default => snprintf(format, sizeof(format), "%s", flag.name);
    }
    printf(" -%-32s %s%s\n", format, flag.help ? flag.help : (:*const char)"", note);
  }
}

fn parse_flags(argc_ptr: &int, argv_ptr: &**const char) -> *const char {
  let argc = *argc_ptr;
  let argv = *argv_ptr;
  let i: int;
  for (i = 1; i < argc; i++) {
    let arg = argv[i];
    let name = arg;
    if (*name == '-') {
      name++;
      if (*name == '-') {
        name++;
      }
      let flag = get_flag_def(name);
      if (!flag) {
        printf("Unknown flag %s\n", arg);
        continue;
      }
      switch (flag.kind) {
        Bool => *flag.ptr.b = true;
        Str => {
          if (i + 1 < argc) {
            i++;
            *flag.ptr.s = argv[i];
          } else {
            printf("No value argument after -%s\n", arg);
          }
        }
        Enum => {
          let option: *const char;
          if (i + 1 < argc) {
            i++;
            option = argv[i];
          } else {
            printf("No value after %s\n", arg);
            break;
          }
          let found = false;
          for (let k = 0; k < flag.num_options; k++) {
            if (strcmp(flag.options[k], option) == 0) {
              *flag.ptr.i = k;
              found = true;
              break;
            }
          }
          if (!found) {
            printf("Invalid value '%s' for %s\n", option, arg);
          }
        }
        default => printf("Unhandled flag kind\n");
      }
    } else {
      break;
    }
  }
  *argc_ptr = argc - i;
  *argv_ptr = argv + i;
  return path_file(strdup(argv[0]));
}
