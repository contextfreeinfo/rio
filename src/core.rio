abstract* = for void be native

Array* = (for Item size:Int) be native

Claim* = Maybe Void

Either* = (for YesValue NoValue) union of
    Yes YesValue
    No NoValue
end

false* = no void

Int* = class with
    add* = for other:Int :Int be native
    eq* = for other:Int :Claim be native
    ge* = for other:Int :Claim be native
    gt* = for other:Int :Claim be native
    le* = for other:Int :Claim be native
    lt* = for other:Int :Claim be native
    ne* = for other:Int :Claim be native
    sub* = for other:Int :Int be native
end

Maybe* = (for Value) Either Value Void

native* = for void be native

No* = (for Value) struct with
    value:Value
end

no* = (for Value) for value:Value be No {value}

null* = false

Pair* = (for Key Value) struct with
    key:Key
    value:Value
end

pair* = (for Key Value) for key:Key value:Value be Pair {key, value}

Predicate* = (for Subject) interface for subject:Subject :Claim be abstract

true* = yes void

Type* = (for Bound) native

Void*:Type = native

void*:Void = native

Yes* = (for Value) struct with
    value:Value
end

yes* = (for Value) for value:Value be Yes {value}
