# TODO Array of fixed size? Static size?

Case* = for<Value> be Pair<Lazy<Claim>, Lazy<Value>>

Claim* = Either<Void, Void>

Either* = for<YesValue, NoValue> be Yes<YesValue> | No<NoValue>

Function* = for<ArgTypes: List<Type>, ReturnType> be class of
    # TODO
end

Int32* = class of
    add* = for(other: Int32): Int32 be native()
    gt* = for(other: Int32): Claim be native()
    lt* = for(other: Int32): Claim be native()
    eq* = for(other: Int32): Claim be native()
end

Lazy* = for<Value> be class of
    builder: Function<[], Value>
end with # TODO Just with.
    value* = for() be
        if (not maybe) be
            # TODO If this/self is a box, maybe such mutation has meaning?
            # This mutation is implementation, although builder has to be
            # immutable or else time of build could make a difference.
            maybe := Yes(builder())
        end
        (maybe as Yes).value
    end

    maybe: Maybe<Value> = false
end

List* = for<Item> be class of
    # TODO
end

Maybe* = for<Value> be Either<Value, Void>

No* = for<Value> be ordered struct of
    value: Value
end

Pair* = for<Key, Value> be ordered struct of
    key: Key
    value: Value
end

Text*: Type = native()

Type* = class of
    union* = for(a: Type, b: Type): Type be native()
end

Void*: Type = native()

Yes* = for<Value> be ordered struct of
    value: Value
end

branch* = for<Value>(cases: List<Case<Value>>): Value be native()

class* = for() be native()

else* = for<Value>(value: Value): Case<Value> be true to value

false* = No(void)

native* = for() be native()

ordered* = for() be native()

# print*: Function<[Text], [Void]> = native()
# print*: Function<[Text], Void> = native()
# print*: Function<Text, Void> = native()
# print*: for(Text): Void = native()
print* = for(text: Text): Void be native()

struct* = for() be native()

true* = Yes(void)

void*: Void = native()
