abstract* = for void be native

Array* = for Item:Type size:Int be native

Claim* = Maybe Void

describe* = for Value:Type be for value:Value :String be native

Either* = for YesValue:Type NoValue:Type be union of
    Yes YesValue
    No NoValue
end

false* = no! void

Int* = class with
    add* = for other:Int :Int be native
    eq* = for other:Int :Claim be native
    ge* = for other:Int :Claim be native
    gt* = for other:Int :Claim be native
    le* = for other:Int :Claim be native
    lt* = for other:Int :Claim be native
    ne* = for other:Int :Claim be native
    sub* = for other:Int :Int be native
end

log* = for Value:Type be for value:Value be native
# TODO Also think and cry for log levels?

Maybe* = for Value:Type be Either Value Void

native* = for void be native

No* = for Value:Type be struct with
    value:Value
end

no* = for Value:Type be for value:Value be No! {value}

null* = false

Pair* = for Key:Type Value:Type be struct with
    key:Key
    value:Value
end

pair* = for Key:Type Value:Type be for key:Key value:Value be Pair! {key, value}

Predicate* = for Subject:Type be
    interface for subject:Subject :Claim be abstract
end

true* = yes! void

Text*:Type = native

Type* = for Bound:(Maybe Type) be native

Void*:Type = native

void*:Void = native

Yes* = for Value:Type be struct with
    value:Value
end

yes* = for Value:Type be for value:Value be Yes! {value}
