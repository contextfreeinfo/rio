typedef typeid = ullong;

enum TypeKind {
  None,
  Void,
  Bool,
  Char,
  UChar,
  SChar,
  Short,
  UShort,
  Int,
  UInt,
  Long,
  ULong,
  LLong,
  ULLong,
  Float,
  Double,
  Const,
  Ptr,
  Ref,
  Array,
  Struct,
  Union,
  Func,
}

struct TypeFieldInfo {
  name: *const char;
  type: typeid;
  offset: int;
}

struct TypeInfo {
  kind: TypeKind;
  size: int;
  align: int;
  name: *const char;
  count: int;
  base: typeid;
  fields: Slice<TypeFieldInfo>;
}

@foreign
let typeinfos: **const TypeInfo;

@foreign
let num_typeinfos: int;

fn typeid_kind(type: typeid) -> TypeKind {
  return TypeKind((type >> 24) & 0xFF);
}

fn typeid_index(type: typeid) -> int {
  return int(type & 0xFFFFFF);
}

fn typeid_size(type: typeid) -> usize {
  return usize(type >> 32);
}

fn get_typeinfo(type: typeid) -> *const TypeInfo {
  let index = typeid_index(type);
  if (typeinfos && index < num_typeinfos) {
    return typeinfos[index];
  } else {
    return NULL;
  }
}

struct Any {
  ptr: &void;
  type: typeid;
}
