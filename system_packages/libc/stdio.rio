#foreign(header = "<stdio.h>")

@foreign
struct FILE;

@foreign
let stdin: &FILE;

@foreign
let stdout: &FILE;

@foreign
let stderr: &FILE;

@foreign
typedef va_list = *char;

@foreign
struct fpos_t;

@foreign const EOF      = -1;
@foreign const SEEK_SET = 0;
@foreign const SEEK_CUR = 1;
@foreign const SEEK_END = 2;

@foreign
def remove(filename: *const char) -> int;

@foreign
def rename(old: *const char, new: *const char) -> int;

@foreign
def tmpfile() -> &FILE;

@foreign
def tmpnam(s: *char) -> *char;

@foreign
def fclose(stream: &FILE) -> int;

@foreign
def fflush(stream: &FILE) -> int;

@foreign
def fopen(filename: *const char, mode: *const char) -> &FILE;

@foreign
def freopen(filename: *const char, mode: *const char, stream: &FILE) -> &FILE;

@foreign
def setbuf(stream: &FILE, buf: *char);

@foreign
def setvbuf(stream: &FILE, buf: *char, mode: int, size: usize) -> int;

@foreign
def fprintf(stream: &FILE, format: *const char, ...) -> int;

@foreign
def fscanf(stream: &FILE, format: *const char, ...) -> int;

@foreign
def printf(format: *const char, ...) -> int;

@foreign
def scanf(format: *const char, ...) -> int;

@foreign
def snprintf(s: *char, n: usize, format: *const char, ...) -> int;

@foreign
def sprintf(s: *char, format: *const char, ...) -> int;

@foreign
def sscanf(s: *const char, format: *const char, ...) -> int;

@foreign
def vfprintf(stream: &FILE, format: *const char, arg: va_list) -> int;

@foreign
def vfscanf(stream: &FILE, format: *const char, arg: va_list) -> int;

@foreign
def vprintf(format: *const char, arg: va_list) -> int;

@foreign
def vscanf(format: *const char, arg: va_list) -> int;

@foreign
def vsnprintf(s: *char, n: usize, format: *const char, arg: va_list) -> int;

@foreign
def vsprintf(s: *char, format: *const char, arg: va_list) -> int;

@foreign
def vsscanf(s: *const char, format: *const char, arg: va_list) -> int;

@foreign
def fgetc(stream: &FILE) -> int;

@foreign
def fgets(s: *char, n: int, stream: &FILE) -> *char;

@foreign
def fputc(c: int, stream: &FILE) -> int;

@foreign
def fputs(s: *const char, stream: &FILE) -> int;

@foreign
def getc(stream: &FILE) -> int;

@foreign
def getchar() -> int;

@foreign
def gets(s: *char) -> *char;

@foreign
def putc(c: int, stream: &FILE) -> int;

@foreign
def putchar(c: int) -> int;

@foreign
def puts(s: *const char) -> int;

@foreign
def ungetc(c: int, stream: &FILE) -> int;

@foreign
def fread(ptr: &void, size: usize, nmemb: usize, stream: &FILE) -> usize;

@foreign
def fwrite(ptr: &const void, size: usize, nmemb: usize, stream: &FILE) -> usize;

@foreign
def fgetpos(stream: &FILE, pos: *fpos_t) -> int;

@foreign
def fseek(stream: &FILE, offset: long, whence: int) -> int;

@foreign
def fsetpos(stream: &FILE, pos: *fpos_t) -> int;

@foreign
def ftell(stream: &FILE) -> long;

@foreign
def rewind(stream: &FILE);

@foreign
def clearerr(stream: &FILE);

@foreign
def feof(stream: &FILE) -> int;

@foreign
def ferror(stream: &FILE) -> int;

@foreign
def perror(s: *const char);
