#foreign(header = "<stdio.h>")

@foreign
struct FILE;

@foreign
let stdin:  FILE*;

@foreign
let stdout: FILE*;

@foreign
let stderr: FILE*;

@foreign
typedef va_list = char*;

@foreign
struct fpos_t;

@foreign const EOF      = -1;
@foreign const SEEK_SET = 0;
@foreign const SEEK_CUR = 1;
@foreign const SEEK_END = 2;

@foreign
fn remove(filename: char const*) -> int;

@foreign
fn rename(old: char const*, new: char const*) -> int;

@foreign
fn tmpfile() -> FILE*;

@foreign
fn tmpnam(s: char*) -> char*;

@foreign
fn fclose(stream: FILE*) -> int;

@foreign
fn fflush(stream: FILE*) -> int;

@foreign
fn fopen(filename: char const*, mode: char const*) -> FILE*;

@foreign
fn freopen(filename: char const*, mode: char const*, stream: FILE*) -> FILE*;

@foreign
fn setbuf(stream: FILE*, buf: char*);

@foreign
fn setvbuf(stream: FILE*, buf: char*, mode: int, size: usize) -> int;

@foreign
fn fprintf(stream: FILE*, format: char const*, ...) -> int;

@foreign
fn fscanf(stream: FILE*, format: char const*, ...) -> int;

@foreign
fn printf(format: char const*, ...) -> int;

@foreign
fn scanf(format: char const*, ...) -> int;

@foreign
fn snprintf(s: char*, n: usize, format: char const*, ...) -> int;

@foreign
fn sprintf(s: char*, format: char const*, ...) -> int;

@foreign
fn sscanf(s: char const*, format: char const*, ...) -> int;

@foreign
fn vfprintf(stream: FILE*, format: char const*, arg: va_list) -> int;

@foreign
fn vfscanf(stream: FILE*, format: char const*, arg: va_list) -> int;

@foreign
fn vprintf(format: char const*, arg: va_list) -> int;

@foreign
fn vscanf(format: char const*, arg: va_list) -> int;

@foreign
fn vsnprintf(s: char*, n: usize, format: char const*, arg: va_list) -> int;

@foreign
fn vsprintf(s: char*, format: char const*, arg: va_list) -> int;

@foreign
fn vsscanf(s: char const*, format: char const*, arg: va_list) -> int;

@foreign
fn fgetc(stream: FILE*) -> int;

@foreign
fn fgets(s: char*, n: int, stream: FILE*) -> char*;

@foreign
fn fputc(c: int, stream: FILE*) -> int;

@foreign
fn fputs(s: char const*, stream: FILE*) -> int;

@foreign
fn getc(stream: FILE*) -> int;

@foreign
fn getchar() -> int;

@foreign
fn gets(s: char*) -> char*;

@foreign
fn putc(c: int, stream: FILE*) -> int;

@foreign
fn putchar(c: int) -> int;

@foreign
fn puts(s: char const*) -> int;

@foreign
fn ungetc(c: int, stream: FILE*) -> int;

@foreign
fn fread(ptr: void*, size: usize, nmemb: usize, stream: FILE*) -> usize;

@foreign
fn fwrite(ptr: void const*, size: usize, nmemb: usize, stream: FILE*) -> usize;

@foreign
fn fgetpos(stream: FILE*, pos: fpos_t*) -> int;

@foreign
fn fseek(stream: FILE*, offset: long, whence: int) -> int;

@foreign
fn fsetpos(stream: FILE*, pos: fpos_t*) -> int;

@foreign
fn ftell(stream: FILE*) -> long;

@foreign
fn rewind(stream: FILE*);

@foreign
fn clearerr(stream: FILE*);

@foreign
fn feof(stream: FILE*) -> int;

@foreign
fn ferror(stream: FILE*) -> int;

@foreign
fn perror(s: char const*);

