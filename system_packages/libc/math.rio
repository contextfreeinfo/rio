#foreign(header = "<math.h>")

@foreign("acosf")
def acos(x: float) -> float;

@foreign("acos")
def acosd(x: double) -> double;

@foreign("asinf")
def asin(x: float) -> float;

@foreign("asin")
def asind(x: double) -> double;

@foreign("atanf")
def atan(x: float) -> float;

@foreign("atan")
def atand(x: double) -> double;

@foreign("atan2f")
def atan2(y: float, x: float) -> float;

@foreign("atan2")
def atan2d(y: double, x: double) -> double;

@foreign("cosf")
def cos(x: float) -> float;

@foreign("cos")
def cosd(x: double) -> double;

@foreign("sinf")
def sin(x: float) -> float;

@foreign("sin")
def sind(x: double) -> double;

@foreign("tanf")
def tan(x: float) -> float;

@foreign("tan")
def tand(x: double) -> double;

@foreign("acoshf")
def acosh(x: float) -> float;

@foreign("acosh")
def acoshd(x: double) -> double;

@foreign("asinhf")
def asinh(x: float) -> float;

@foreign("asinh")
def asinhd(x: double) -> double;

@foreign("atanhf")
def atanh(x: float) -> float;

@foreign("atanh")
def atanhd(x: double) -> double;

@foreign("coshf")
def cosh(x: float) -> float;

@foreign("cosh")
def coshd(x: double) -> double;

@foreign("sinhf")
def sinh(x: float) -> float;

@foreign("sinh")
def sinhd(x: double) -> double;

@foreign("tanhf")
def tanh(x: float) -> float;

@foreign("tanh")
def tanhd(x: double) -> double;

@foreign("expf")
def exp(x: float) -> float;

@foreign("exp")
def expd(x: double) -> double;

@foreign("exp2f")
def exp2(x: float) -> float;

@foreign("exp2")
def exp2d(x: double) -> double;

@foreign("expm1f")
def expm1(x: float) -> float;

@foreign("expm1")
def expm1d(x: double) -> double;

@foreign("frexpf")
def frexp(value: float, exp: *int) -> float;

@foreign("frexp")
def frexpd(value: double, exp: *int) -> double;

@foreign("ilogbf")
def ilogb(x: float) -> int;

@foreign("ilogb")
def ilogbd(x: double) -> int;

@foreign("ldexpf")
def ldexp(x: float, exp: int) -> float;

@foreign("ldexp")
def ldexpd(x: double, exp: int) -> double;

@foreign("logf")
def log(x: float) -> float;

@foreign("log")
def logd(x: double) -> double;

@foreign("log10f")
def log10(x: float) -> float;

@foreign("log10")
def log10d(x: double) -> double;

@foreign("log1pf")
def log1p(x: float) -> float;

@foreign("log1p")
def log1pd(x: double) -> double;

@foreign("log2f")
def log2(x: float) -> float;

@foreign("log2")
def log2d(x: double) -> double;

@foreign("logbf")
def logb(x: float) -> float;

@foreign("logb")
def logbd(x: double) -> double;

@foreign("modff")
def modf(value: float, iptr: *float) -> float;

@foreign("modf")
def modfd(value: double, iptr: *double) -> double;

@foreign("scalbnf")
def scalbn(x: float, n: int) -> float;

@foreign("scalbn")
def scalbnd(x: double, n: int) -> double;

@foreign("scalblnf")
def scalbln(x: float, n: long) -> float;

@foreign("scalbln")
def scalblnd(x: double, n: long) -> double;

@foreign("cbrtf")
def cbrt(x: float) -> float;

@foreign("cbrt")
def cbrtd(x: double) -> double;

@foreign("fabsf")
def fabs(x: float) -> float;

@foreign("fabs")
def fabsd(x: double) -> double;

@foreign("hypotf")
def hypot(x: float, y: float) -> float;

@foreign("hypot")
def hypotd(x: double, y: double) -> double;

@foreign("powf")
def pow(x: float, y: float) -> float;

@foreign("pow")
def powd(x: double, y: double) -> double;

@foreign("sqrtf")
def sqrt(x: float) -> float;

@foreign("sqrt")
def sqrtd(x: double) -> double;

@foreign("erff")
def erf(x: float) -> float;

@foreign("erf")
def erfd(x: double) -> double;

@foreign("erfcf")
def erfc(x: float) -> float;

@foreign("erfc")
def erfcd(x: double) -> double;

@foreign("lgammaf")
def lgamma(x: float) -> float;

@foreign("lgamma")
def lgammad(x: double) -> double;

@foreign("tgammaf")
def tgamma(x: float) -> float;

@foreign("tgamma")
def tgammad(x: double) -> double;

@foreign("ceilf")
def ceil(x: float) -> float;

@foreign("ceil")
def ceild(x: double) -> double;

@foreign("floorf")
def floor(x: float) -> float;

@foreign("floor")
def floord(x: double) -> double;

@foreign("nearbyintf")
def nearbyint(x: float) -> float;

@foreign("nearbyint")
def nearbyintd(x: double) -> double;

@foreign("rintf")
def rint(x: float) -> float;

@foreign("rint")
def rintd(x: double) -> double;

@foreign("lrintf")
def lrint(x: float) -> long;

@foreign("lrint")
def lrintd(x: double) -> long;

@foreign("llrintf")
def llrint(x: float) -> llong;

@foreign("llrint")
def llrintd(x: double) -> llong;

@foreign("roundf")
def round(x: float) -> float;

@foreign("round")
def roundd(x: double) -> double;

@foreign("lroundf")
def lroun(x: float) -> long;

@foreign("lround")
def lroundd(x: double) -> long;

@foreign("lroundf")
def llround(x: float) -> llong;

@foreign("lround")
def llroundd(x: double) -> llong;

@foreign("truncf")
def trunc(x: float) -> float;

@foreign("trunc")
def truncd(x: double) -> double;

@foreign("fmodf")
def fmod(x: float, y: float) -> float;

@foreign("fmod")
def fmodd(x: double, y: double) -> double;

@foreign("remainderf")
def remainder(x: float, y: float) -> float;

@foreign("remainder")
def remainderd(x: double, y: double) -> double;

@foreign("remquof")
def remquo(x: float, y: float, quo: *int) -> float;

@foreign("remquo")
def remquod(x: double, y: double, quo: *int) -> double;

@foreign("copysignf")
def copysign(x: float, y: float) -> float;

@foreign("copysign")
def copysignd(x: double, y: double) -> double;

@foreign("nanf")
def nan(tagp: *const char) -> float;

@foreign("nan")
def nand(tagp: *const char) -> double;

@foreign("nextafterf")
def nextafter(x: float, y: float) -> float;

@foreign("nextafter")
def nextafterd(x: double, y: double) -> double;

@foreign("fdimf")
def fdim(x: float, y: float) -> float;

@foreign("fdim")
def fdimd(x: double, y: double) -> double;

@foreign("fmaxf")
def fmax(x: float, y: float) -> float;

@foreign("fmax")
def fmaxd(x: double, y: double) -> double;

@foreign("fminf")
def fmin(x: float, y: float) -> float;

@foreign("fmin")
def fmind(x: double, y: double) -> double;

@foreign("fmaf")
def fma(x: float, y: float, z: float) -> float;

@foreign("fma")
def fmad(x: double, y: double, z: double) -> double;

