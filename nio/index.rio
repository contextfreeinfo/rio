import libc {...}

enum OptionKey {
  None,
  Out,
}

struct Options {
  in: String;
  out: String;
}

def main(argc: int, argv: *String) -> int {
  let options = parse_args((argv + 1, argc - 1));
  run(options);
  return 0;
}

def parse_args(args: Slice<String>) -> Options {
  let mut key = OptionKey.None;
  let mut options: Options;
  for (args) do(arg) {
    // Handle arg value.
    if (key) {
      switch (key) {
        Out => {
          options.out = arg;
        }
      }
      key = OptionKey.None;
    } else {
      // Find arg key.
      if (!strcmp(arg, "-o")) {
        key = OptionKey.Out;
      } else {
        options.in = arg;
      }
    }
  }
  return options;
}

def run(options: Options) {
  printf("in: %s\n", options.in);
  printf("out: %s\n", options.out);
  if (options.in && options.out) {
    parse(options.in);
    gen(options.out);
  }
}
