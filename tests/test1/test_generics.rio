def test_generics() {
  let slirce: Slirce;
  let slorce: Slorce<int> = {items: <[]int>[1, 2, 3], length: 3};
  let slorce_ref: Slorce<&int> = {items: <[]&int>[slorce.items], length: 1};
  printf("Generically, %d\n", *slorce_ref[0]);
  let slarb: Slorce<Bar>;
  let slerce: Slerce<int>;
  slerce.boring.thing = 5;
  slerce.goo = {items: &slerce.boring.thing, length: 1};
  slerce.goos = {items: &slerce.goo.items, length: 1};
  printf("Should be %d: %d\n", slerce.boring.thing, slerce.goos[0][0]);
  // Assignment properly succeeds.
  let slarce: Slarce = slorce;
  // Assignment properly fails.
  // slarce = slarb;
  // This should render as test1_Slorce_Hey, and no test1_Slorce_float should
  // even exist.
  let slorce_hey: Slorce<Hey>;
  // And this should both parse and yield a proper type name.
  let slorce_slorce_hey: Slorce<Slorce<Hey>>;
  // Test some functions, too.
  test_generic_functions();
}

typedef Hey = float;

struct Slirce {
  slarce: Slarce;
}

typedef Slarce = Slorce<int>;

struct Slorce<Item> {
  length: usize;
  items: *Item;
}

struct Boring<Thing> {
  thing: Thing;
}

struct Slerce<Goo> {
  // We need to resolve type args in dupe, too.
  goo: Slorce<Goo>;
  goos: Slorce<*Goo>;
  boring: Boring<Goo>;
}

// Should be unresolved here.
// let item: Item;

def test_generic_functions() {
  // let slarce: Slarce;
  // printf("slarce sum: %d", sum(slarce, slarce));
  printf("int sum: %d\n", sum.<int>(1, 2));
  printf("float sum: %g\n", sum.<float>(1.1, 2.2));
  printf(
    "float sum_slice: %g\n",
    // sum_slice!([1.1, 2.2, 3.3]),
    sum_slice.<float>({items: <[]float>[1.1, 2.2, 3.3], length: 3}),
  );
  // printf("int sum: %d", sum(1, 2));
  // printf("float sum: %d", sum(1.1, 2.2));
  let slices: []Slice<int> = [{}, {items: <[]int>[12], length: 1}];
  for (slices) do(slice) {
    let first_thing = first.<int>(slice);
    switch (first_thing.kind) {
      Ok => printf("Ok: %d\n", first_thing.val);
      Err => printf("Err: %d\n", first_thing.err);
    }
  }
  // first(<Slice<int>>{items: &thing, length: 1});
  // first(Slice.<int>{});
  // first(Slice.<int>{items: &thing, length: 1});
  // first(Slice[int]{});
  // first(Slice[int]{items: &thing, length: 1});
  // first.<int>(Slice.<int>{});
  // first.<int>({});
}

typedef Num = int;

// def sum(x: Num, y: Num) -> Num {
// def sum<Num>(x: Num, y: Num) -> Num {
def sum<Num: int>(x: Num, y: Num) -> Num {
  return x + y;
}

// def sum_slice(nums: Slice<Num>) -> Num {
// def sum_slice<Num>(nums: Slice<Num>) -> Num {
def sum_slice<Num: int>(nums: Slice<Num>) -> Num {
  let result: Num = 0;
  for (nums) do(num) {
    // TODO Make nested generic calls work ...
    // result = sum.<Num>(result, num);
    result += num;
  }
  return result;
}

// Deeper generics.
// TODO In generation, optimize all equivalent functions down to single cases?
// TODO That is, from a type checking perspective, these types matter, but they
// TODO could all be replace with `void` from an implementation perspective.
// TODO Maybe could still generate simple wrapper functions for type safety from
// TODO C if wanted ...
// TODO The previous discussion was from when this returned &Item, not Item.
// TODO But that case is still interesting.
// def first<Item>(slice: Slice) -> Try {
// def first<Item>(slice: Slice<Item>) -> Try<Item> {
// def first<Item>(slice: Slice) -> Result<Item, TestErr> {
def first<Item>(slice: Slice<Item>) -> Result<Item, TestErr> {
  if (slice.length) {
    // TODO Infer type args on result.
    return {kind: Result.Ok, val: slice[0]};
    // return Result(kind: Result.Ok, val: slice[0]);
    // Fails because doesn't infer type args.
    // return Result.Ok(val: slice[0]);
  } else {
    return {kind: Result.Err, err: TestErr.Crazy};
  }
}
