import .subtest1 {subtest1_func1 = func1}
import C = libc {gc = getchar, ...}

#static_assert('\xFF' == 255)

let mut esc_test_str = "Hello\nworld\nHex: \x01\x10\xFHello\xFF";

let mut some_array: *int = <[]int>[1, 2, 3];

struct SomeIncompleteType;

let mut incomplete_ptr: *SomeIncompleteType;
// let mut incomplete_val: Incomplete;

/* This is a block comment */

/*
  This is a
  multi-line
  block comment
*/

/* This is a /* nested */ block comment */

const PI = 3.14;
const PI2 = PI + PI;

const U8: uint8 = 42;

let mut c: char = 1;
let mut uc: uchar = 1;
let mut sc: schar = 1;

typedef F1 = do();
typedef F2 = do(f: do(int, int,) -> int) -> int;
typedef F3 = do(f: do());

const N = 42 as char + 8 != 0;

typedef A = [1 + 2 * sizeof(h())]int;

let mut code = """
#include <stdio.h>

int main(int argc, char **argv) {
  printf("Hello, world!\n");
  return 0;
}
""";

struct S1 {
  a: int;
  b: const int;
}

struct S2 {
  s1: S1;
}

// Should be unresolved here.
// let mut item: Item;

def test_packages() {
  subtest1_func1();
}

def test_modify() {
  let mut i = 42;
  #static_assert(typeof(i) == typeof(int));
  let mut p: *int = &i;
  #static_assert(typeof(p) == typeof<*int>);
  p--;
  let mut x = *p++;
  #assert(x == *--p);
  (*p)++;
  (*p)--;
  let mut stk: [16]int;
  let mut sp: *int = stk;
  *sp++ = 1;
  *sp++ = 2;
  x = *--sp;
  #assert(x == 2);
  x = *--sp;
  #assert(x == 1);
  #assert(sp == stk);
}

def f10(a: [3]wchar) {
  a[1] = 42;
}

def test_arrays() {
  let mut a: []wchar = [1, 2, 3];
  // a = a;
  f10(a);
  let mut b = a;
  let mut w1: wchar;
  let mut w2 = w1;
}

def test_loops() {
  // break;
  // continue;
  switch (0) {
    1 => {}
    default => {
      if (1) {
        // TODO Make no longer apply to switch!
        break;
      }
      for (;;) {
        continue;
      }
      // continue;
      // break;
    }
  }
  while (0) {
  } while;
  for (let mut i = 0; i < 10; i++) {
  } for;
  for (;;) {
    break;
  }
  for (let mut i = 0;;) {
    break;
  }
  for (; 0; ) {
  }
  for (let mut i = 0;; i++) {
    break;
  }
  let mut i = 0;
  for (;; i++) {
    break;
  }
}

def test_nonmodifiable() {
  let mut s1: S1;
  s1.a = 0;
  // s1.b = 0;
  // s1 = {};
  let mut s2: S2;
  s2.s1.a = 0;
  // s2.s1.b = 0;
  // s2.s1 = {};
  // s2 = {};
}

struct UartCtrl {
  tx_enable: bool;
  rx_enable: bool;
}

const UART_CTRL_REG = 0x12345678 as *uint32;

def pack(ctrl: UartCtrl) -> uint32 {
  return (ctrl.tx_enable & 1) | ((ctrl.rx_enable & 1) << 1);
}

def unpack(word: uint32) -> UartCtrl {
  return {tx_enable: word & 0b01, rx_enable: (word & 0b10) >> 1};
}

def test_uart() {
  let mut tx_enable = unpack(*UART_CTRL_REG).tx_enable;
  *UART_CTRL_REG = pack({tx_enable: !tx_enable, rx_enable: false});
  let mut ctrl = unpack(*UART_CTRL_REG);
  ctrl.rx_enable = true;
  *UART_CTRL_REG = pack(ctrl);
}

def h() -> uchar {
  Vector{x: 1, y: 2}.x = 42;
  let mut v = &Vector(1, 2);
  v.x = 42;
  let mut p = &<int>[0];
  let mut x = uint(1) + long(2);
  let mut y = +c;
  return uchar(x);
}

def g(u: U) -> int {
  return u.i;
}

def k(vp: &void, ip: &int) {
  vp = ip;
  ip = vp;
}

def f1() {
  let mut p = &<int>[0];
  *p = 42;
}

def f3(a: []int) {
}

typedef U = IntOrPtr;

def example_test() -> int {
  return fact_rec(10) == fact_iter(10);
}

// Should be @tagged
union IntOrPtr {
  i: int;
  p: *int;
}

let mut char_to_escape: [256]const char = [
  '\0': '0',
  '\n': 'n',
  '\r': 'r',
  '\t': 't',
  '\v': 'v',
  '\b': 'b',
  '\a': 'a',
  '\\': '\\',
  '"': '"',
  '\'': '\'',
];

let mut escape_to_char: [256]const char = [
  '0': '\0',
  '\'': '\'',
  '"': '"',
  '\\': '\\',
  'n': '\n',
  'r': '\r',
  't': '\t',
  'v': '\v',
  'b': '\b',
  'a': '\a',
];

let mut a2: []int = [1, 2, 3, 10: 4];
// let mut a3: []int;

def is_even(digit: int) -> int {
  let mut b = 0;
  switch (digit) {
    0, 2, 4, 6, 8 => b = 1;
  }
  return b;
}

// def f() {
//   let mut u1 = IntOrPtr{i: 42};
//   let mut u2 = IntOrPtr{p: 42 as *int};
//   u1.i = 0;
//   u2.p = 0 as *int;
// }

let mut i: int;

struct Vector {
  x: int;
  y: int;
}

def f2(v: Vector) {
  v = {};
}

def fact_iter(n: int) -> int {
  let mut r = 1;
  for (let mut i = 0; i <= n; i++) {
    r *= i;
  }
  return r;
}

def fact_rec(n: int) -> int {
  if (n == 0) {
    return 1;
  } else {
    return n * fact_rec(n-1);
  }
}

const M = 1 + sizeof(p);

let mut p: *T;

struct T {
  a: [M]int;
}

enum Color {
  None,
  Red,
  Green,
  Blue,
  Num,
}

enum {
  FOO,
  BAR,
}

@unscoped
enum TypedEnum = int8 {
  BAZ,
  QUUX,
}

// @enum struct More {
//   prob: float;
//   union {
//     Happy, Sad: int;
//     Solemn: float;
//     Other: *const char;
//   }
// }

@enum struct More {
  prob: float;
  union switch {
    None, MoreNone => :void;
    Happy, Sad => amount: float;
    Solemn => years: int;
    // TODO Support subaggregates on switch unions.
    Other => struct {
      description: *const char;
      value: float;
    }
  }
}

union Direct switch {
  First => a: int;
  Second => b: float;
}

let mut color_names: [Color.Num]*const char = [
// let mut color_names: [*const char * Color.Num] = [
// let mut color_names: [*char * Color.Num] = [
  Color.None: "none",
  Color.Red: "red",
  Color.Green: "green",
  Color.Blue: "blue",
];

def test_enum() {
  let mut a: Color = Color.Red;
  let b = Color.Red;
  let c = a + b;
  let mut x = &c;
  // ++*x;
  let mut i: int = a;
  a = i;
  printf(
    "%d %d %d %d\n",
    Color.None, Color.Red, Color.Green, Color.Blue,
  );
  printf("No color: %s\n", color_names[Color.None]);
  let d = BAR;
  let e = QUUX;
  #static_assert(typeof(e) == typeof<const TypedEnum>);
  let mut f: TypedEnum;
  f = BAZ;
  // TODO Should be able to imply kind from fields.
  let more = More{kind: More.Sad, prob: 0.5, amount: 0.9};
  let more2 = More.Happy(prob: 0.5, amount: 0.9);
  // TODO Support curlies here.
  let more3 = More.Happy{more2.prob, amount: 0.9};
  let more_kind = More.Happy;
}

def test_assign() {
  let mut i: int = 0;
  let mut f: float = 3.14;
  let mut p: *int = &i;
  i++;
  i--;
  p++;
  p--;
  p += 1;
  i /= 2;
  i *= 123;
  i %= 3;
  i <<= 1;
  i >>= 2;
  i &= 0xff;
  i |= 0xff00;
  i ^= 0x0ff0;
  // f++;
  // f--;
}

def benchmark(n: int) {
  let mut r = 1;
  for (let mut i = 1; i <= n; i++) {
    r *= i;
  } for;
}

def va_test(x: int, ...) -> int {
  return 0;
}

typedef F = do(x: int, ...) -> int;

def test_lits() {
  let f = 3.14;
  let d = 3.14d;
  let i = 1;
  let u = 0xffffffffu;
  let l = 1l;
  let ul = 1ul;
  let ll = 0x100000000ll;
  let ull = 0xffffffffffffffffull;
  let x1 = 0xffffffff;
  let x2 = 4294967295;
  let x3 = 0xffffffffffffffff;
  let x4 = 0b10101010 + 0b01010101;
  // u = 0b0;
  // u = 0x0;
}

def test_ops() {
  let pi = 3.14;
  let mut f = 0.0;
  f = +pi;
  f = -pi;
  let mut n = -1;
  n = ~n;
  f = f * pi + n;
  f = pi / pi;
  n = 3 % 2;
  n = n + 1 as uchar;
  let mut p: *int = &n;
  p = p + 1;
  n = ((p + 1) - p) as int;
  n = n << 1;
  n = n >> 1;
  let mut b = p + 1 > p;
  b = p + 1 >= p;
  b = p + 1 < p;
  b = p + 1 <= p;
  b = p + 1 == p;
  b = 1 > 2;
  b = 1.23 <= pi;
  n = 0xff;
  b = n & ~1;
  b = n & 1;
  b = (n & ~1) ^ 1;
  b = p && pi;
}

const IS_DEBUG = true;

def test_bool() {
  let mut b = false;
  b = true;
  let mut i = 0;
  i = IS_DEBUG;
}

def test_ctrl() -> int {
  switch (1) {
    0 => return 0;
    default => return 1;
  }
  // return 0;
}

let mut j: const int;
let mut q: *const int;
let mut cv: const Vector;

def f4(x: *const char) {
}

struct ConstVector {
  x: const int;
  y: const int;
}

def f5(p: *const int) {
}

def test_convert() {
  let mut a: *const int = 0;
  let mut b: *int = 0;
  a = b;
  let mut p: &void = 0;
  f5(p);
}

def test_const() {
  let mut cv2 = ConstVector(1, 2);
  // cv2 = {};
  let mut i = 0;
  i = 1;
  // j = 0;
  // *q = 0;
  let x = cv.x;
  // cv.x = {};
  let mut c = escape_to_char[0];
  c = char_to_escape[c];
  c = esc_test_str[0];
  f4(escape_to_char);
  let as = 1;
  let mut p = 0 as *const char; // as *int
  p = escape_to_char + 1;
  let q = <*char>escape_to_char;
  c = q['n'];
  // q = escape_to_char;
  p = 1 as *const char;
  // p = 1;
  // i = p;
  i = p as ullong as int;
}

#static_assert(sizeof(int) == 4)

def test_init() {
  let x = 0 as const int;
  #static_assert(sizeof(x) == 4);
  let mut y: int;
  y = 0;
  let mut z: int = 42;
  let mut a: []int = [1, 2, 3];
  // a2: []int;
  // v: void;
  for (let mut i: ullong = 0; i < 10; i++) {
    printf("%llu\n", i);
  }
  let mut b: [4]int = [1, 2, 3, 4];
  b[0] = a[2];
}

def test_sizeof() {
  let mut i = 0;
  let mut n = sizeof(i);
  n = sizeof(int);
  n = sizeof<int>;
  n = sizeof<*int>;
  // n = sizeof<*int>;
}

def test_cast() {
  let mut p: *int = 0;
  let mut a: uint64 = 0;
  // a = p;
  a = p as uint64;
  // p = a;
  p = a as *int;
}

def print_any(any: Any) {
  switch (any.type) {
    typeof(int) => printf("%d", *(any.ptr as *const int));
    typeof(float) => printf("%f", *(any.ptr as *const float));
    default => printf("<unknown>");
  } switch;
  printf(": ");
  print_type(any.type);
}

def println_any(any: Any) {
  print_any(any);
  printf("\n");
}

def print_typeid(type: typeid) {
  let mut index = typeid_index(type);
  printf("typeid(%d)", index);
}

const Ptr = 959595;

def print_type(type: typeid) {
  let mut typeinfo = get_typeinfo(type);
  if (!typeinfo) {
    print_typeid(type);
    return;
  }
  switch (typeinfo.kind) {
    // U8 => printf("This shouldn't compile.");
    // (U8) => printf("I hope this is unlikely???");
    (Ptr) => printf("This is very unlikely.");
    Ptr => {
      print_type(typeinfo.base);
      printf("*");
    }
    Ref => {
      print_type(typeinfo.base);
      printf("&");
    }
    Const => {
      print_type(typeinfo.base);
      printf(" const");
    }
    Array => {
      print_type(typeinfo.base);
      printf("[%d]", typeinfo.count);
    }
    default => {
      if (typeinfo.name) {
        printf("%s", typeinfo.name);
      } else {
        print_typeid(type);
      } if;
    }
  } switch;
}

def println_type(type: typeid) {
  print_type(type);
  printf("\n");
}

def print_typeinfo(type: typeid) {
  let mut typeinfo = get_typeinfo(type);
  if (!typeinfo) {
    print_typeid(type);
    return;
  }
  printf("<");
  print_type(type);
  printf(" size=%d align=%d", typeinfo.size, typeinfo.align);
  switch (typeinfo.kind) {
    Struct, Union => {
      printf(" %s={ ", typeinfo.kind == TypeKind.Struct ? "struct" : "union");
      // TODO Why can't it find fields items correctly here?
      // for (typeinfo.fields) do(field) {
      for (let mut i = 0; i < typeinfo.fields.length; i++) {
        let mut field = typeinfo.fields[i];
        printf("@offset(%d) %s: ", field.offset, field.name);
        print_type(field.type);
        printf("; ");
      }
      printf("}");
    }
  } switch;
  printf(">");
}

def println_typeinfo(type: typeid) {
  print_typeinfo(type);
  printf("\n");
}

def test_typeinfo() {
  let mut i = 42;
  let mut f = 3.14;
  let mut p = NULL;

  println_any((&i, typeof(i)));
  println_any((&f, typeof(f)));
  println_any((&p, typeof(p)));

  println_type(typeof(int));
  println_type(typeof<*const int>);
  println_type(typeof<[42]*const int>);
  println_type(typeof(UartCtrl));

  println_typeinfo(typeof(int));
  println_typeinfo(typeof(UartCtrl));
  println_typeinfo(typeof<*IntOrPtr>);
  println_typeinfo(typeof<&IntOrPtr>);
  println_typeinfo(typeof(IntOrPtr));
}

struct Ints {
  num_ints: int;
  int_ptr: *int;
  int_arr: [3]int;
}

def test_va_list(fmt: *const char, ...) {
  let mut init_args: va_list;
  va_start(&init_args, &fmt);
  let mut args: va_list;
  va_copy(&args, &init_args);
  va_end(&init_args);
  let mut c: char;
  va_arg(&args, (&c, typeof(c)));
  let mut i: int;
  va_arg(&args, (&i, typeof(i)));
  let mut ll: llong;
  va_arg(&args, (&ll, typeof(ll)));
  printf("c=%d i=%d ll=%lld\n", c, i, ll);
  va_end(&args);
}

def test_compound_literals() {
  let mut w: *Vector;
  w = &(1, 2);
  let mut a = <[]int>[1, 2, 3];
  let mut i = 42;
  let mut implied: const Any = (&i, typeof(i));
  let mut explicit = <const Any>(&i, typeof(i));
  let mut v: Ints = {
    num_ints: 3,
    int_ptr: <[]int>[1, 2, 3],
    int_arr: [1, 2, 3],
  };
  let mut ints_of_ints: []Ints = [
    {num_ints: 3, int_arr: [1, 2, 3]},
    {num_ints: 2, int_ptr: <[2]int>[-1, -2]},
  ];
  let mut x = 1;
  let mut y = 2;
  let mut vec = Vector{x, y};
  let mut vec2 = Vector{vec.x, y: vec.y + 1};
}

def test_complete() {
  let mut x = 0;
  // let mut x = 1;
  // let mut x = 2;
  let mut y = 0;
  @complete
  if (x == 0) {
    y = 1;
  } else if (x == 1) {
    y = 2;
  }

  x = 1;
  // x = -1;
  #assert(x >= 0);

  x = 0;
  // x = 1;
  // x = 2;
  @complete
  switch (x) {
    0 => y = 3;
    1 ... 3, 5 ... 6, 8 => y = 4;
  }
}

def test_limits() {
  let mut char_min = CHAR_MIN;
  let mut char_max = CHAR_MAX;
  let mut schar_min = SCHAR_MIN;
  let mut schar_max = SCHAR_MAX;
  let mut uchar_min = UCHAR_MIN;
  let mut uchar_max = UCHAR_MAX;
  let mut short_min = SHORT_MIN;
  let mut short_max = SHORT_MAX;
  let mut ushort_min = USHORT_MIN;
  let mut ushort_max = USHORT_MAX;
  let mut int_min = INT_MIN;
  let mut int_max = INT_MAX;
  let mut uint_min = UINT_MIN;
  let mut uint_max = UINT_MAX;
  let mut long_min = LONG_MIN;
  let mut long_max = LONG_MAX;
  let mut ulong_min = ULONG_MIN;
  let mut ulong_max = ULONG_MAX;
  let mut llong_min = LLONG_MIN;
  let mut llong_max = LLONG_MAX;
  let mut ullong_min = ULLONG_MIN;
  let mut ullong_max = ULLONG_MAX;

  let mut wchar_min = WCHAR_MIN;
  let mut wchar_max = WCHAR_MAX;

  let mut int8_min = INT8_MIN;
  let mut int8_max = INT8_MAX;
  let mut uint8_min = UINT8_MIN;
  let mut uint8_max = UINT8_MAX;
  let mut int16_min = INT16_MIN;
  let mut int16_max = INT16_MAX;
  let mut uint16_min = UINT16_MIN;
  let mut uint16_max = UINT16_MAX;
  let mut int32_min = INT32_MIN;
  let mut int32_max = INT32_MAX;
  let mut uint32_min = UINT32_MIN;
  let mut uint32_max = UINT32_MAX;
  let mut int64_min = INT64_MIN;
  let mut int64_max = INT64_MAX;
  let mut uint64_min = UINT64_MIN;
  let mut uint64_max = UINT64_MAX;

  let mut usize_min = USIZE_MIN;
  let mut usize_max = USIZE_MAX;
  let mut ssize_min = SSIZE_MIN;
  let mut ssize_max = SSIZE_MAX;
  let mut uintptr_min = UINTPTR_MIN;
  let mut uintptr_max = UINTPTR_MAX;
  let mut intptr_min = INTPTR_MIN;
  let mut intptr_max = INTPTR_MAX;
}

def test_alignof() {
  let mut i = 42;
  let mut n1 = alignof(i);
  let mut n2 = alignof(i+1);
  let mut n3 = alignof(ullong);
  let mut n4 = alignof<*int>;
}

struct BufHdr {
  cap: usize;
  len: usize;
  buf: [1]char;
  //  buf: []char;
  //  buf: [0]char;
}

def test_offsetof() {
  let mut n = offsetof(BufHdr, buf);
//  n = offsetof(BufHdr, foo);
}

struct Thing {
  a: int;
}

let mut thing: Thing;

def returns_ptr() -> &Thing {
  return &thing;
}

def returns_ptr_to_const() -> &const Thing {
  return &thing;
}

def test_lvalue() {
  returns_ptr().a = 5;
//  returns_ptr_to_const().a = 5;
  let mut p = returns_ptr_to_const();
//  p.a = 42;
}

def test_if() {
  if (1) {
  }
//  if (let mut x = Thing{}) {
//  }
  if (let mut x = 42) {
  }
  if (let mut x = 42; x >= 0) {
  }
  if (let mut x: int = 42; x >= 0) {
  }
}

def test_reachable() {
//  bogus_func();
}

def test_os_arch() {
  printf("Target operating system: %s\n", RIOOS);
  printf("Target machine architecture: %s\n", RIOARCH);
}

struct Bar {
  rc: int;
}

struct Foo {
  bar: const *Bar;
}

def test_const_ptr_deref() {
  let mut bar = Bar{rc: 42};
  let mut foo = Foo{&bar};
  let mut i = foo.bar.rc;
}

def test_ref() {
  let mut i = 1;
  let mut p = &i;
  let mut q: *int = &i;
  // Should cause error.
  // let mut r = p + 1;
  // p[0] = 3;
  let mut s = q + 1;
  *p = 2;
}

typedef my_time_t = C.time_t;

def test_type_path() {
  let mut t1 = time(NULL);
  let mut t2: C.time_t = time(NULL);
  let mut t3: my_time_t = time(NULL);
}

// TODO Zig-style errors?
// error Crazy;
// error Worse;
enum TestErr {
  Crazy,
  Worse,
}

// def maybe_math(x: float) -> float throws {
// def maybe_math(x: float) -> !float {
// def maybe_math(x: float) -> Try<float> {
// def maybe_math(x: float) -> float | error {
// def maybe_math(x: float) -> float | TestErr {
def maybe_math(x: float) -> Result<float, TestErr> {
  // return x + 1;
  // return Ok(x + 1);
  // return Ok{x + 1};
  // return {val: x + 1};
  // return {val: x + 1};
  return {kind: Result.Ok, val: x + 1};
}

def test_err() {
  maybe_math(4.5);
}

def test_for_each() {
  let mut friends: []*const char = ["Larry", "Moe", "Curly"];
  // let mut friends = ["Larry", "Moe", "Curly"];
  // Loops on array.
  for (friends) do(friend) {
    printf("friend: %s\n", friend);
  }
  for (friends) do(friend, index) {
    if (!index) {
      continue;
    }
    printf("friends[%zu]: %s\n", index, friend);
    if (index >= 1) {
      break;
    }
  }
  for (friends) do(a) {
    for (friends) do(b) {
      if (a != b) {
        printf("%s vs %s\n", a, b);
      }
    }
  }
  for (friends) {
    printf(".");
  }
  printf("\n");
  // Fails because `others` doesn't have a constant size on it.
  // let mut others = friends; for (others) {}
  // Loop on slice.
  let mut slice: Slice<*const char> = (friends, 2);
  for (slice) do(name, index) {
    printf("slice[%zu]: %s\n", index, name);
  }
  // And refs.
  for &(slice) do(name) {
    *name = "Someone";
  }
  // And index slices for kicks.
  printf("%s, %s, and %s\n", slice[0], friends[1], friends[2]);
}

def main(argc: int, argv: **char) -> int {
  if (argv == 0) {
    printf("argv is null\n");
  }
  // #report(2 || 5);
  test_ref();
  test_const_ptr_deref();
  test_limits();
  test_va_list("whatever", 123 as char, 123123 as int, 123123123123 as llong);
  test_os_arch();
  test_packages();
  test_if();
  test_modify();
  test_lvalue();
  test_alignof();
  test_offsetof();
  test_complete();
  test_compound_literals();
  test_loops();
  test_sizeof();
  test_assign();
  test_enum();
  test_arrays();
  test_cast();
  test_init();
  test_lits();
  test_const();
  test_bool();
  test_ops();
  test_typeinfo();
  test_reachable();
  test_type_path();
  test_generics();
  test_err();
  test_for_each();
  // gc();
  return 0;
}
