--- std ---
Block {
  Array: 0,
  Bool: 1,
  Box: 2,
  Bytes: 3,
  Error: 4,
  F32: 5,
  F64: 6,
  I16: 8,
  I32: 9,
  I64: 10,
  I8: 7,
  ISize: 11,
  Opt: 12,
  Slice: 13,
  U16: 15,
  U32: 16,
  U64: 17,
  U8: 14,
  USize: 18,
  Void: 19,
  print: 20,
}
  Token VSpace[1, 1](

)
  Token Comment[3, 1](# Always 1D for now.)
  Token VSpace[3, 21](
)
  Token Comment[4, 1](# Sometime to support ND later or in separate library.)
  Token VSpace[4, 55](
)
  Type
    Token Type[5, 1](type)
    Spaced
      Token HSpace[5, 5]( )
      Token Id[5, 6](Array) @ 0
      Parens
        Token BracketOpen[5, 11]([)
        Token Id[5, 12](Item)
        Token BracketClose[5, 16](])
  Token VSpace[5, 17](
)
  Token Comment[6, 1](# type Array[Item, let size: Int])
  Token VSpace[6, 34](

)
  Type
    Token Type[8, 1](type)
    Token HSpace[8, 5]( )
    Token Id[8, 6](Bool) @ 1
  Token VSpace[8, 10](
)
  Token Comment[9, 1](# type Bool: Opt[Void] # Could be?)
  Token VSpace[9, 35](
)
  Token Comment[10, 1](# let false = Bool::None)
  Token VSpace[10, 25](
)
  Token Comment[11, 1](# let true = Bool::Some())
  Token VSpace[11, 26](
)
  Token Comment[12, 1](# enum Bool # Maybe?)
  Token VSpace[12, 21](
)
  Token Comment[13, 1](#    False)
  Token VSpace[13, 11](
)
  Token Comment[14, 1](#    True)
  Token VSpace[14, 10](
)
  Token Comment[15, 1](# end)
  Token VSpace[15, 6](

)
  Type
    Token Type[17, 1](type)
    Spaced
      Token HSpace[17, 5]( )
      Token Id[17, 6](Box) @ 2
      Parens
        Token BracketOpen[17, 9]([)
        Token Id[17, 10](Item)
        Token BracketClose[17, 14](])
  Token VSpace[17, 15](
)
  Token Comment[18, 1](# type Box[Item]: Array[Item, 1] ???)
  Token VSpace[18, 37](

)
  Token Comment[20, 1](# TODO Formally, should be Octets.)
  Token VSpace[20, 35](
)
  Token Comment[21, 1](# TODO No force null-terminated here? Just on literals?)
  Token VSpace[21, 56](
)
  Token Comment[22, 1](# TODO Slices won't have )
  Token VSpace[22, 26](
)
  Type
    Token Type[23, 1](type)
    Spaced
      Colon
        Token HSpace[23, 5]( )
        Token Id[23, 6](Bytes) @ 3
        Token Colon[23, 11](:)
        Token HSpace[23, 12]( )
        Token Id[23, 13](Array) @ 0
      Parens
        Token BracketOpen[23, 18]([)
        Token Id[23, 19](U8) @ 14
        Token BracketClose[23, 21](])
  Token VSpace[23, 22](

)
  Type
    Token Type[25, 1](type)
    Token HSpace[25, 5]( )
    Token Id[25, 6](Error) @ 4
  Token VSpace[25, 11](

)
  Type
    Token Type[27, 1](type)
    Token HSpace[27, 5]( )
    Token Id[27, 6](F32) @ 5
  Token VSpace[27, 9](

)
  Type
    Token Type[29, 1](type)
    Token HSpace[29, 5]( )
    Token Id[29, 6](F64) @ 6
  Token VSpace[29, 9](

)
  Token Comment[31, 1](# type Function[... what here ...?])
  Token VSpace[31, 36](

)
  Type
    Token Type[33, 1](type)
    Token HSpace[33, 5]( )
    Token Id[33, 6](I8) @ 7
  Token VSpace[33, 8](

)
  Type
    Token Type[35, 1](type)
    Token HSpace[35, 5]( )
    Token Id[35, 6](I16) @ 8
  Token VSpace[35, 9](

)
  Type
    Token Type[37, 1](type)
    Token HSpace[37, 5]( )
    Token Id[37, 6](I32) @ 9
  Token VSpace[37, 9](

)
  Type
    Token Type[39, 1](type)
    Token HSpace[39, 5]( )
    Token Id[39, 6](I64) @ 10
  Token VSpace[39, 9](

)
  Type
    Token Type[41, 1](type)
    Token HSpace[41, 5]( )
    Token Id[41, 6](ISize) @ 11
  Token VSpace[41, 11](

)
  Type
    Token Type[43, 1](type)
    Spaced
      Token HSpace[43, 5]( )
      Token Id[43, 6](Opt) @ 12
      Parens
        Token BracketOpen[43, 9]([)
        Token Id[43, 10](Item)
        Token BracketClose[43, 14](])
  Token VSpace[43, 15](
)
  Token Comment[44, 1](# enum Opt[Item])
  Token VSpace[44, 17](
)
  Token Comment[45, 1](#   None)
  Token VSpace[45, 9](
)
  Token Comment[46, 1](#   Some(Item))
  Token VSpace[46, 15](
)
  Token Comment[47, 1](# end)
  Token VSpace[47, 6](

)
  Token Comment[49, 1](# TODO Can enum be a library-level thing with vararg or tuple generics?)
  Token VSpace[49, 72](
)
  Token Comment[50, 1](# TODO Like variant in c++?)
  Token VSpace[50, 28](
)
  Token Comment[51, 1](# TODO Also, allow arbitary sum types of other types?)
  Token VSpace[51, 54](
)
  Token Comment[52, 1](# enum Result[Item, E: Error])
  Token VSpace[52, 30](
)
  Token Comment[53, 1](#   Ok(Item))
  Token VSpace[53, 13](
)
  Token Comment[54, 1](#   Err(E))
  Token VSpace[54, 11](
)
  Token Comment[55, 1](# end)
  Token VSpace[55, 6](

)
  Token Comment[57, 1](# TODO Slices don't own, and Arrays do? Is that all?)
  Token VSpace[57, 53](
)
  Token Comment[58, 1](# TODO Dimensionality on slices?)
  Token VSpace[58, 33](
)
  Type
    Token Type[59, 1](type)
    Spaced
      Token HSpace[59, 5]( )
      Token Id[59, 6](Slice) @ 13
      Parens
        Token BracketOpen[59, 11]([)
        Token Id[59, 12](Item)
        Token BracketClose[59, 16](])
  Token VSpace[59, 17](

)
  Type
    Token Type[61, 1](type)
    Token HSpace[61, 5]( )
    Token Id[61, 6](U8) @ 14
  Token VSpace[61, 8](

)
  Type
    Token Type[63, 1](type)
    Token HSpace[63, 5]( )
    Token Id[63, 6](U16) @ 15
  Token VSpace[63, 9](

)
  Type
    Token Type[65, 1](type)
    Token HSpace[65, 5]( )
    Token Id[65, 6](U32) @ 16
  Token VSpace[65, 9](

)
  Type
    Token Type[67, 1](type)
    Token HSpace[67, 5]( )
    Token Id[67, 6](U64) @ 17
  Token VSpace[67, 9](

)
  Type
    Token Type[69, 1](type)
    Token HSpace[69, 5]( )
    Token Id[69, 6](USize) @ 18
  Token VSpace[69, 11](

)
  Type
    Token Type[71, 1](type)
    Token HSpace[71, 5]( )
    Token Id[71, 6](Void) @ 19
  Token VSpace[71, 10](

)
  Def
    Token Def[73, 1](def)
    Assign
      Spaced
        Token HSpace[73, 4]( )
        Token Id[73, 5](print) @ 20
        Arrow
          Parens
            Token ParenOpen[73, 10](()
            Colon
              Token Id[73, 11](line)
              Token Colon[73, 15](:)
              Token HSpace[73, 16]( )
              Token Id[73, 17](Bytes) @ 3
            Token ParenClose[73, 22]())
          Token HSpace[73, 23]( )
          Token Arrow[73, 24](->)
          Token HSpace[73, 26]( )
          Token Id[73, 27](Void) @ 19
      Token HSpace[73, 31]( )
      Token Assign[73, 32](=)
      Token HSpace[73, 33]( )
      Token Extern[73, 34](extern)
  Token VSpace[73, 40](

)
  Token Eof[73, 40]()

--- main ---
Token Eof[1, 1]()
