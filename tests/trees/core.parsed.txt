top
  infix
    prefix
      id: 'Any'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'Bool'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'Int'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'IntRange'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    prefix
      id: 'struct'
      space
        hspace: ' '
      prefix
        keyOf: 'of'
        space
          vspace: '
'
          hspace: '  '
        /space
        infix
          id: 'from'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
        /infix
        space
          vspace: '
'
          hspace: '  '
        /space
        infix
          id: 'thru'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
        /infix
        space
          vspace: '
'
        keyEnd: 'end'
      /prefix
    /prefix
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'List'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        squareBegin: '['
        prefix
          keyFor: 'for'
          space
            hspace: ' '
          id: 'Item'
        /prefix
        squareEnd: ']'
      /prefix
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'String'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'Type'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        squareBegin: '['
        prefix
          keyFor: 'for'
          space
            hspace: ' '
          infix
            id: 'Interface'
            space
              hspace: ' '
            keyIs: 'is'
            space
              hspace: ' '
            prefix
              roundBegin: '('
              prefix
                id: 'Type'
                space
                  hspace: ' '
                id: 'Interface'
              /prefix
              roundEnd: ')'
            /prefix
          /infix
        /prefix
        squareEnd: ']'
      /prefix
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'Void'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'each'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          hspace: ' '
        infix
          id: 'range'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'IntRange'
          space
            hspace: ' '
        /infix
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'Void'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'native'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'printf'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    prefix
      keyFor: 'for'
      space
        vspace: '
'
        hspace: '  '
      /space
      infix
        id: 'pattern'
        space
          hspace: ' '
        keyIs: 'is'
        space
          hspace: ' '
        id: 'String'
      /infix
      space
        vspace: '
'
        hspace: '  '
      /space
      ellipsis: '...'
      space
        vspace: '
'
      prefix
        keyTo: 'to'
        space
          hspace: ' '
        id: 'Int'
        space
          hspace: ' '
      /prefix
      prefix
        keyBe: 'be'
        space
          hspace: ' '
        id: 'native'
      /prefix
    /prefix
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'pub'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'struct'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'switch'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        squareBegin: '['
        prefix
          keyFor: 'for'
          space
            hspace: ' '
          id: 'Result'
        /prefix
        squareEnd: ']'
      /prefix
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          vspace: '
'
          hspace: '  '
        /space
        infix
          prefix
            roundBegin: '('
            prefix
              id: 'cases'
              space
                hspace: ' '
              ellipsis: '...'
            /prefix
            roundEnd: ')'
          /prefix
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          prefix
            roundBegin: '('
            prefix
              id: 'List'
              space
                hspace: ' '
              id: 'Result'
            /prefix
            roundEnd: ')'
          /prefix
        /infix
        space
          vspace: '
'
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'Result'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'thru'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          hspace: ' '
        infix
          id: 'from'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        infix
          id: 'thru'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'IntRange'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    prefix
      id: '_'
      space
        hspace: ' '
      id: 'from'
      space
        hspace: ' '
      id: 'thru'
    /prefix
  /infix
  space
    vspace: '

'
  infix
    prefix
      id: 'void'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
    /prefix
    opDef: '='
    space
      hspace: ' '
    prefix
      keyFor: 'for'
      space
        hspace: ' '
      infix
        id: 'any'
        space
          hspace: ' '
        keyIs: 'is'
        space
          hspace: ' '
        id: 'Any'
        space
          hspace: ' '
      /infix
      prefix
        keyTo: 'to'
        space
          hspace: ' '
        id: 'Void'
        space
          hspace: ' '
      /prefix
      prefix
        keyBe: 'be'
        space
          hspace: ' '
        prefix
          roundBegin: '('
          roundEnd: ')'
        /prefix
      /prefix
    /prefix
  /infix
  space
    vspace: '

'
    comment: '# Int like Number -> Int is (Type Number)'
    vspace: '
'
  /space
  infix
    prefix
      id: 'eq'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          hspace: ' '
        infix
          id: 'x'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        infix
          id: 'y'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'Bool'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '
'
  infix
    prefix
      id: 'le'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          hspace: ' '
        infix
          id: 'x'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        infix
          id: 'y'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'Bool'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '
'
  infix
    prefix
      id: 'add'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          hspace: ' '
        infix
          id: 'x'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        infix
          id: 'y'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '
'
  infix
    prefix
      id: 'sub'
      space
        hspace: ' '
      id: 'pub'
      space
        hspace: ' '
      prefix
        keyFor: 'for'
        space
          hspace: ' '
        infix
          id: 'x'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        infix
          id: 'y'
          space
            hspace: ' '
          keyIs: 'is'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /infix
        prefix
          keyTo: 'to'
          space
            hspace: ' '
          id: 'Int'
          space
            hspace: ' '
        /prefix
      /prefix
    /prefix
    opDef: '='
    space
      hspace: ' '
    id: 'native'
  /infix
  space
    vspace: '
'
/top
nodes: 633
tokens: 367
interns: 55
token size: 8
node size: 12
