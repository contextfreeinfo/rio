id: 'main'
hspace: ' '
opIs: '='
hspace: ' '
keyFor: 'for'
hspace: ' '
roundBegin: '('
roundEnd: ')'
hspace: ' '
keyBe: 'be'
vspace: '
'
hspace: '  '
id: 'each'
hspace: ' '
roundBegin: '('
integer: '0'
opDot: '.'
id: 'thru'
hspace: ' '
integer: '9'
roundEnd: ')'
hspace: ' '
keyFor: 'for'
hspace: ' '
id: 'n'
hspace: ' '
keyBe: 'be'
vspace: '
'
hspace: '    '
id: 'void'
hspace: ' '
keyOf: 'of'
hspace: ' '
id: 'printf'
hspace: ' '
quoteDouble: '"'
stringText: 'fib(%d) = %d'
stringEscape: '\n'
quoteDouble: '"'
hspace: ' '
id: 'n'
hspace: ' '
roundBegin: '('
id: 'fib'
hspace: ' '
id: 'n'
roundEnd: ')'
vspace: '
'
hspace: '  '
keyEnd: 'end'
vspace: '
'
keyEnd: 'end'
vspace: '

'
comment: '# Params without default values are positional.'
vspace: '
'
id: 'fib'
hspace: ' '
opIs: '='
hspace: ' '
keyFor: 'for'
hspace: ' '
id: 'n'
hspace: ' '
keyAs: 'as'
hspace: ' '
id: 'int'
hspace: ' '
keyTo: 'to'
hspace: ' '
id: 'int'
hspace: ' '
keyBe: 'be'
vspace: '
'
hspace: '  '
id: 'switch'
hspace: ' '
keyOf: 'of'
vspace: '
'
hspace: '    '
id: 'case'
hspace: ' '
id: 'n'
hspace: ' '
opLe: '<='
hspace: ' '
integer: '0'
hspace: ' '
keyBe: 'be'
hspace: ' '
integer: '0'
vspace: '
'
hspace: '    '
id: 'case'
hspace: ' '
id: 'n'
hspace: ' '
opEq: '=='
hspace: ' '
integer: '1'
hspace: ' '
keyBe: 'be'
hspace: ' '
integer: '1'
vspace: '
'
hspace: '    '
id: 'else'
hspace: ' '
keyBe: 'be'
hspace: ' '
id: 'fib'
hspace: ' '
roundBegin: '('
id: 'n'
hspace: ' '
opSub: '-'
hspace: ' '
integer: '2'
roundEnd: ')'
hspace: ' '
opAdd: '+'
hspace: ' '
id: 'fib'
hspace: ' '
roundBegin: '('
id: 'n'
hspace: ' '
opSub: '-'
hspace: ' '
integer: '1'
roundEnd: ')'
vspace: '
'
hspace: '  '
keyEnd: 'end'
vspace: '
'
keyEnd: 'end'
vspace: '
'
nodes: 0
interns: 39
token size: 8
node size: 12
