NodeKind.block
  NodeKind.assign_to
    NodeKind.call
      NodeKind.leaf: TokenKind.key_use use
      NodeKind.string
        NodeKind.leaf: TokenKind.string_begin_double "
        NodeKind.leaf: TokenKind.string_text c
        NodeKind.leaf: TokenKind.string_end "
      /NodeKind.string
    /NodeKind.call
    NodeKind.leaf: TokenKind.op_eqto =>
    NodeKind.leaf: TokenKind.op_spread ..
  /NodeKind.assign_to
  NodeKind.assign
    NodeKind.leaf: TokenKind.id main
    NodeKind.leaf: TokenKind.op_eq =
    NodeKind.fun
      NodeKind.fun_for
        NodeKind.call
      NodeKind.fun_with
        NodeKind.call
          NodeKind.leaf: TokenKind.id fx
          NodeKind.leaf: TokenKind.id printf
        /NodeKind.call
      /NodeKind.fun_with
      NodeKind.be
        NodeKind.call
          NodeKind.leaf: TokenKind.id each
          NodeKind.call
            NodeKind.dot
              NodeKind.leaf: TokenKind.int 0
              NodeKind.leaf: TokenKind.op_dot .
              NodeKind.leaf: TokenKind.id thru
            /NodeKind.dot
            NodeKind.leaf: TokenKind.int 9
          /NodeKind.call
          NodeKind.fun
            NodeKind.fun_for
              NodeKind.leaf: TokenKind.id n
            NodeKind.be
              NodeKind.call
                NodeKind.leaf: TokenKind.id void
                NodeKind.call
                  NodeKind.leaf: TokenKind.id printf
                  NodeKind.string
                    NodeKind.leaf: TokenKind.string_begin_double "
                    NodeKind.leaf: TokenKind.string_text fib(%d) = %d
                    NodeKind.leaf: TokenKind.escape \n
                    NodeKind.leaf: TokenKind.string_end "
                  /NodeKind.string
                  NodeKind.leaf: TokenKind.id n
                  NodeKind.call
                    NodeKind.leaf: TokenKind.id fib
                    NodeKind.leaf: TokenKind.id n
                  /NodeKind.call
                /NodeKind.call
              /NodeKind.call
            /NodeKind.be
          /NodeKind.fun
        /NodeKind.call
      /NodeKind.be
    /NodeKind.fun
  /NodeKind.assign
  NodeKind.assign
    NodeKind.call
      NodeKind.leaf: TokenKind.id fib
      NodeKind.leaf: TokenKind.id pub
    /NodeKind.call
    NodeKind.leaf: TokenKind.op_eq =
    NodeKind.fun
      NodeKind.fun_for
        NodeKind.as
          NodeKind.colon
            NodeKind.leaf: TokenKind.int 0
            NodeKind.leaf: TokenKind.op_colon :
            NodeKind.leaf: TokenKind.id n
          /NodeKind.colon
          NodeKind.leaf: TokenKind.key_as as
          NodeKind.leaf: TokenKind.id int
        /NodeKind.as
      /NodeKind.fun_for
      NodeKind.fun_to
        NodeKind.leaf: TokenKind.id int
      NodeKind.be
        NodeKind.call
          NodeKind.leaf: TokenKind.key_case case
          NodeKind.fun
            NodeKind.fun_for
              NodeKind.compare
                NodeKind.leaf: TokenKind.id n
                NodeKind.leaf: TokenKind.op_le <=
                NodeKind.leaf: TokenKind.int 0
              /NodeKind.compare
            /NodeKind.fun_for
            NodeKind.be
              NodeKind.leaf: TokenKind.int 0
          /NodeKind.fun
          NodeKind.fun
            NodeKind.fun_for
              NodeKind.compare
                NodeKind.leaf: TokenKind.id n
                NodeKind.leaf: TokenKind.op_eqeq ==
                NodeKind.leaf: TokenKind.int 1
              /NodeKind.compare
            /NodeKind.fun_for
            NodeKind.be
              NodeKind.leaf: TokenKind.int 1
          /NodeKind.fun
          NodeKind.call
            NodeKind.leaf: TokenKind.key_else else
            NodeKind.be
              NodeKind.call
                NodeKind.leaf: TokenKind.id vouch
                NodeKind.add
                  NodeKind.call
                    NodeKind.leaf: TokenKind.id fib
                    NodeKind.add
                      NodeKind.leaf: TokenKind.id n
                      NodeKind.leaf: TokenKind.op_sub -
                      NodeKind.leaf: TokenKind.int 2
                    /NodeKind.add
                  /NodeKind.call
                  NodeKind.leaf: TokenKind.op_add +
                  NodeKind.call
                    NodeKind.leaf: TokenKind.id fib
                    NodeKind.add
                      NodeKind.leaf: TokenKind.id n
                      NodeKind.leaf: TokenKind.op_sub -
                      NodeKind.leaf: TokenKind.int 1
                    /NodeKind.add
                  /NodeKind.call
                /NodeKind.add
              /NodeKind.call
            /NodeKind.be
          /NodeKind.call
        /NodeKind.call
      /NodeKind.be
    /NodeKind.fun
  /NodeKind.assign
/NodeKind.block
Normed size: 100
