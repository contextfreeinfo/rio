NodeKind.block
  NodeKind.assign_to
    NodeKind.assign_to
      NodeKind.call
        NodeKind.leaf: TokenKind.key_use use
        NodeKind.string
          NodeKind.leaf: TokenKind.string_begin_double "
          NodeKind.leaf: TokenKind.string_text c
          NodeKind.leaf: TokenKind.string_end "
        /NodeKind.string
      /NodeKind.call
      NodeKind.leaf: TokenKind.op_eqto =>
      NodeKind.leaf: TokenKind.id c
    /NodeKind.assign_to
    NodeKind.leaf: TokenKind.op_eqto =>
    NodeKind.leaf: TokenKind.op_spread ..
  /NodeKind.assign_to
  NodeKind.assign
    NodeKind.leaf: TokenKind.id main
    NodeKind.leaf: TokenKind.op_eq =
    NodeKind.fun
      NodeKind.fun_with
        NodeKind.leaf: TokenKind.key_with with
        NodeKind.call
          NodeKind.leaf: TokenKind.id fx
          NodeKind.leaf: TokenKind.id printf
        /NodeKind.call
      /NodeKind.fun_with
      NodeKind.be
        NodeKind.leaf: TokenKind.key_be be
        NodeKind.block
          NodeKind.call
            NodeKind.leaf: TokenKind.id void
            NodeKind.of
              NodeKind.leaf: TokenKind.key_of of
              NodeKind.call
                NodeKind.leaf: TokenKind.id printf
                NodeKind.string
                  NodeKind.leaf: TokenKind.string_begin_double "
                  NodeKind.leaf: TokenKind.string_text Hi!
                  NodeKind.leaf: TokenKind.escape \n
                  NodeKind.leaf: TokenKind.string_end "
                /NodeKind.string
              /NodeKind.call
            /NodeKind.of
          /NodeKind.call
        /NodeKind.block
        NodeKind.end
          NodeKind.leaf: TokenKind.key_end end
      /NodeKind.be
    /NodeKind.fun
  /NodeKind.assign
/NodeKind.block
Normed size: 38
