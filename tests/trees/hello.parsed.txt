NodeKind.block
  NodeKind.assign_to
    NodeKind.assign_to
      NodeKind.call
        NodeKind.leaf: TokenKind.key_use use
        NodeKind.space
          NodeKind.leaf: TokenKind.hspace  
        NodeKind.string
          NodeKind.leaf: TokenKind.quote_double "
          NodeKind.leaf: TokenKind.string_text c
          NodeKind.leaf: TokenKind.quote_double "
        /NodeKind.string
        NodeKind.space
          NodeKind.leaf: TokenKind.hspace  
      /NodeKind.call
      NodeKind.leaf: TokenKind.op_eqto =>
      NodeKind.space
        NodeKind.leaf: TokenKind.hspace  
      NodeKind.leaf: TokenKind.id c
      NodeKind.space
        NodeKind.leaf: TokenKind.hspace  
    /NodeKind.assign_to
    NodeKind.leaf: TokenKind.op_eqto =>
    NodeKind.space
      NodeKind.leaf: TokenKind.hspace  
    NodeKind.leaf: TokenKind.op_spread ..
  /NodeKind.assign_to
  NodeKind.space
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.vspace 

  /NodeKind.space
  NodeKind.assign
    NodeKind.leaf: TokenKind.id main
    NodeKind.space
      NodeKind.leaf: TokenKind.hspace  
    NodeKind.leaf: TokenKind.op_eq =
    NodeKind.space
      NodeKind.leaf: TokenKind.hspace  
    NodeKind.fun
      NodeKind.fun_with
        NodeKind.leaf: TokenKind.key_with with
        NodeKind.space
          NodeKind.leaf: TokenKind.hspace  
        NodeKind.block
          NodeKind.call
            NodeKind.leaf: TokenKind.id fx
            NodeKind.space
              NodeKind.leaf: TokenKind.hspace  
            NodeKind.leaf: TokenKind.id printf
            NodeKind.space
              NodeKind.leaf: TokenKind.hspace  
          /NodeKind.call
        /NodeKind.block
      /NodeKind.fun_with
      NodeKind.be
        NodeKind.leaf: TokenKind.key_be be
        NodeKind.block
          NodeKind.space
            NodeKind.leaf: TokenKind.vspace 

            NodeKind.leaf: TokenKind.hspace   
          /NodeKind.space
          NodeKind.call
            NodeKind.leaf: TokenKind.id void
            NodeKind.space
              NodeKind.leaf: TokenKind.hspace  
            NodeKind.of
              NodeKind.leaf: TokenKind.key_of of
              NodeKind.space
                NodeKind.leaf: TokenKind.hspace  
              NodeKind.block
                NodeKind.call
                  NodeKind.leaf: TokenKind.id printf
                  NodeKind.space
                    NodeKind.leaf: TokenKind.hspace  
                  NodeKind.string
                    NodeKind.leaf: TokenKind.quote_double "
                    NodeKind.leaf: TokenKind.string_text Hi!
                    NodeKind.leaf: TokenKind.escape \n
                    NodeKind.leaf: TokenKind.quote_double "
                  /NodeKind.string
                /NodeKind.call
              /NodeKind.block
            /NodeKind.of
          /NodeKind.call
          NodeKind.space
            NodeKind.leaf: TokenKind.vspace 

        /NodeKind.block
        NodeKind.end
          NodeKind.leaf: TokenKind.key_end end
      /NodeKind.be
    /NodeKind.fun
  /NodeKind.assign
  NodeKind.space
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.comment # main2 = for env as !env to try void be
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.comment #   env.out.print? "Hi!"
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.comment # end
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.comment # # main3 = for env! be
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.comment # #   env.out.print? "Hi!"
    NodeKind.leaf: TokenKind.vspace 

    NodeKind.leaf: TokenKind.comment # # end
    NodeKind.leaf: TokenKind.vspace 

  /NodeKind.space
/NodeKind.block
Pool storage: 4096 128 (539 -> 667)
Parsed size: 90
Token size: 8 node size: 12 1
