--- main ---
Block {
  a: 23,
  Yo: 24,
}
  Let
    Token Let[1, 1](let)
    Assign
      Colon
        Token HSpace[1, 4]( )
        Token Id[1, 5](a) @ 23
        Token Colon[1, 6](:)
        Token HSpace[1, 7]( )
        Token Id[1, 8](Float) @ 7
      Token HSpace[1, 13]( )
      Token Assign[1, 14](=)
      Token HSpace[1, 15]( )
      Spaced
        Token Id[1, 16](pow)
        Parens
          Token ParenOpen[1, 19](()
          Comma
            Number <F64 @ 6>
              Token Int[1, 20](3)
              Token Dot[1, 21](.)
              Token Fraction[1, 22](14)
            Token Comma[1, 24](,)
            Token HSpace[1, 25]( )
            Number <F64 @ 6>
              Token Plus[1, 26](-)
              Token Int[1, 27](0)
              Token Dot[1, 28](.)
              Token Fraction[1, 29](5)
          Token ParenClose[1, 30]())
  Token VSpace[1, 31](

)
  Add
    Token Id[3, 1](a) @ 23
    Token HSpace[3, 2]( )
    Token Plus[3, 3](+)
    Token HSpace[3, 4]( )
    Token Id[3, 5](b)
  Token HSpace[3, 6]( )
  Token Comment[3, 7](# <-- Start higher than vspace. Make sure addition is nested in the block.)
  Token VSpace[3, 81](

)
  Token Comment[5, 1](# Do commas separate spaced lists for three levels deep???)
  Token VSpace[5, 59](

)
  Spaced
    Token Id[7, 1](out)
    Token Dot[7, 4](.)
    Token Id[7, 5](print) @ 22
    Token HSpace[7, 10]( )
    String "Hello, "world"!"
      Token StringStart[7, 11](")
      Token StringText[7, 12](Hello, )
      Token EscapeStart[7, 19](\)
      Token Escape[7, 20](")
      Token StringText[7, 21](world)
      Token EscapeStart[7, 26](\)
      Token Escape[7, 27](")
      Token StringText[7, 28](!)
      Token StringStop[7, 29](")
  Token HSpace[7, 30]( )
  Token Comment[7, 31](# Should be a comment.)
  Token VSpace[7, 53](
)
  Spaced
    Token Id[8, 1](if)
    Token HSpace[8, 3]( )
    Token Id[8, 4](a1)
    Token HSpace[8, 6]( )
    Do
      Token Do[8, 7](do)
      Block
        Token VSpace[8, 9](
)
        Token HSpace[9, 1](  )
        Spaced
          Token Id[9, 3](say)
          Token HSpace[9, 6]( )
          String "Hi! # Should be in the string.
"
            Token StringStart[9, 7](')
            Token StringText[9, 8](Hi! # Should be in the string.)
        Token VSpace[9, 38](
)
        Token HSpace[10, 1](  )
        Token Comment[10, 3](# Keep one "do" non-ident, so we don't leave out an end here.)
        Token VSpace[10, 64](
)
        Token HSpace[11, 1](  )
        Spaced
          Token Id[11, 3](what)
          Token HSpace[11, 7]( )
          Parens
            Token ParenOpen[11, 8](()
            Block
              Spaced
                String "do you"
                  Token StringStart[11, 9](")
                  Token StringText[11, 10](do you)
                  Token StringStop[11, 16](")
                Token HSpace[11, 17]( )
                Do
                  Token Do[11, 18](do)
                  Spaced
                    Token HSpace[11, 20]( )
                    Token Id[11, 21](without)
                    Token HSpace[11, 28]( )
                    Token Id[11, 29](an)
                  Token HSpace[11, 31]( )
                  Token End[11, 32](end)
                Token Error[11, 35](?)
              Token VSpace[11, 36](
)
      Token End[12, 1](end)
  Token VSpace[12, 4](

)
  Stray
    Token End[14, 1](end)
  Token VSpace[14, 4](

)
  Assign
    Token Id[16, 1](z)
    Token HSpace[16, 2]( )
    Token Assign[16, 3](=)
    Token HSpace[16, 4]( )
    Token Comment[16, 5](# This should be ignored)
    Token VSpace[16, 29](

)
    Token HSpace[18, 1](  )
    Token Comment[18, 3](# All this, too.)
    Token VSpace[18, 19](

)
    Token HSpace[20, 1](  )
    Multiply
      Parens
        Token ParenOpen[20, 3](()
        Add
          Token Id[20, 4](x)
          Token HSpace[20, 5]( )
          Token Plus[20, 6](+)
          Token HSpace[20, 7]( )
          Number <I64 @ 11>
            Token Int[20, 8](1)
          Token HSpace[20, 9]( )
          Token Plus[20, 10](-)
          Token HSpace[20, 11]( )
          Number <F64 @ 6>
            Token Plus[20, 12](+)
            Token Int[20, 13](0)
            Token Dot[20, 14](.)
            Token Fraction[20, 15](3)
        Token ParenClose[20, 16]())
      Token HSpace[20, 17]( )
      Token Times[20, 18](*)
      Token HSpace[20, 19]( )
      Token Id[20, 20](y)
      Token HSpace[20, 21]( )
      Token Times[20, 22](/)
      Token HSpace[20, 23]( )
      Number <F64 @ 6>
        Token Dot[20, 24](.)
        Token Fraction[20, 25](2)
  Token VSpace[20, 26](

)
  Spaced
    Token Id[22, 1](hi)
    Token HSpace[22, 3]( )
    Number <F64 @ 6>
      Token Int[22, 4](1)
      Token Dot[22, 5](.)
  Token VSpace[22, 6](
)
  Spaced
    Token Assign[23, 1](=)
    Token HSpace[23, 2]( )
    Token Id[23, 3](ha)
  Token VSpace[23, 5](

)
  Token Id[25, 1](hi)
  Token VSpace[25, 3](

)
  Comma
    Token Id[27, 1](a) @ 23
    Token Comma[27, 2](,)
    Token HSpace[27, 3]( )
    Assign
      Token Id[27, 4](b)
      Token HSpace[27, 5]( )
      Token Assign[27, 6](=)
      Token HSpace[27, 7]( )
      Token Id[27, 8](c)
    Token Comma[27, 9](,)
    Token HSpace[27, 10]( )
    Spaced
      Token Id[27, 11](d)
      Token HSpace[27, 12]( )
      Token Id[27, 13](e)
  Token VSpace[27, 14](
)
  Parens
    Token ParenOpen[28, 1](()
    Block
      Comma
        Spaced
          Token Id[28, 2](a) @ 23
          Token HSpace[28, 3]( )
          Token Id[28, 4](b)
        Token Comma[28, 5](,)
        Token HSpace[28, 6]( )
        Spaced
          Token Id[28, 7](c)
          Token HSpace[28, 8]( )
          Token Id[28, 9](d)
      Token Semi[28, 10](;)
      Token HSpace[28, 11]( )
      Comma
        Spaced
          Token Id[28, 12](e)
          Token HSpace[28, 13]( )
          Token Id[28, 14](f)
        Token Comma[28, 15](,)
        Token HSpace[28, 16]( )
        Spaced
          Token Id[28, 17](g)
          Token HSpace[28, 18]( )
          Token Id[28, 19](h)
    Token ParenClose[28, 20]())
  Token Semi[28, 21](;)
  Token HSpace[28, 22]( )
  Token Id[28, 23](again)
  Token VSpace[28, 28](

)
  Spaced
    Add
      Number <I64 @ 11>
        Token Int[30, 1](1)
      Token HSpace[30, 2]( )
      Token Plus[30, 3](+)
      Number <I64 @ 11>
        Token Int[30, 4](1)
      Token HSpace[30, 5]( )
      Token Plus[30, 6](+)
      Token Semi[30, 7](;)
    Token Id[30, 8](again)
  Token VSpace[30, 13](

)
  Type
    Token Type[32, 1](type)
    Token HSpace[32, 5]( )
    Token Id[32, 6](Yo) @ 24
  Token VSpace[32, 8](

)
  Def
    Token Def[34, 1](def)
    Spaced
      Token HSpace[34, 4]( )
      Token Id[34, 5](a) @ 23
      Colon
        Parens
          Token ParenOpen[34, 6](()
          Token ParenClose[34, 7]())
        Token Colon[34, 8](:)
        Token HSpace[34, 9]( )
        Token Id[34, 10](Bytes) @ 3
      Token HSpace[34, 15]( )
      Do
        Token Do[34, 16](do)
        Block {
          b: 26,
        }
          Token VSpace[34, 18](
)
          Token HSpace[35, 1](  )
          Let
            Token Let[35, 3](let)
            Assign
              Token HSpace[35, 6]( )
              Token Id[35, 7](b) @ 26
              Token HSpace[35, 8]( )
              Token Assign[35, 9](=)
              Token HSpace[35, 10]( )
              Token Id[35, 11](c)
          Token VSpace[35, 12](
)
          Token HSpace[36, 1](  )
          Spaced
            Token Id[36, 3](return)
            Token HSpace[36, 9]( )
            String "hi"
              Token StringStart[36, 10](')
              Token StringText[36, 11](hi)
              Token StringStop[36, 13](')
          Token VSpace[36, 14](
)
        Token End[37, 1](end)
  Token VSpace[37, 4](
)
  Token Eof[37, 4]()
