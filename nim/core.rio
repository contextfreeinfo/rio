Any pub = native

Bool pub = native

# Int like Number -> Int is (Type Number)
Int pub = native

IntRange pub = struct of
  from is Int
  thru is Int
end

List pub for Item = native

String pub = native

Type pub for Interface is (Type Interface) = native

Void pub = native

each pub for range is IntRange to Void = native

true pub is Bool = native
false pub is Bool = native
else pub = true

native pub = native

printf pub = for
  pattern is String
  ...
to Int be native

pub pub = native

struct pub = native

case pub [for Value] for
  (branches ...) is (List (struct condition is Bool value is Value))
to Value = native

thru pub for from is Int thru is Int to IntRange = _ from thru

void pub = for any is Any to Void be ()

eq pub for x is Int y is Int to Bool = native
le pub for x is Int y is Int to Bool = native
add pub for x is Int y is Int to Int = native
sub pub for x is Int y is Int to Int = native
